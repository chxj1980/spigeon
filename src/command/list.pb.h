// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: src/command/list.proto

#ifndef PROTOBUF_src_2fcommand_2flist_2eproto__INCLUDED
#define PROTOBUF_src_2fcommand_2flist_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace store_list {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_src_2fcommand_2flist_2eproto();
void protobuf_AssignDesc_src_2fcommand_2flist_2eproto();
void protobuf_ShutdownFile_src_2fcommand_2flist_2eproto();

class list;
class list_item;

// ===================================================================

class list_item : public ::google::protobuf::Message {
 public:
  list_item();
  virtual ~list_item();

  list_item(const list_item& from);

  inline list_item& operator=(const list_item& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const list_item& default_instance();

  void Swap(list_item* other);

  // implements Message ----------------------------------------------

  list_item* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const list_item& from);
  void MergeFrom(const list_item& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes member = 1;
  inline bool has_member() const;
  inline void clear_member();
  static const int kMemberFieldNumber = 1;
  inline const ::std::string& member() const;
  inline void set_member(const ::std::string& value);
  inline void set_member(const char* value);
  inline void set_member(const void* value, size_t size);
  inline ::std::string* mutable_member();
  inline ::std::string* release_member();
  inline void set_allocated_member(::std::string* member);

  // optional bytes extra = 2;
  inline bool has_extra() const;
  inline void clear_extra();
  static const int kExtraFieldNumber = 2;
  inline const ::std::string& extra() const;
  inline void set_extra(const ::std::string& value);
  inline void set_extra(const char* value);
  inline void set_extra(const void* value, size_t size);
  inline ::std::string* mutable_extra();
  inline ::std::string* release_extra();
  inline void set_allocated_extra(::std::string* extra);

  // @@protoc_insertion_point(class_scope:store_list.list.item)
 private:
  inline void set_has_member();
  inline void clear_has_member();
  inline void set_has_extra();
  inline void clear_has_extra();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* member_;
  ::std::string* extra_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_src_2fcommand_2flist_2eproto();
  friend void protobuf_AssignDesc_src_2fcommand_2flist_2eproto();
  friend void protobuf_ShutdownFile_src_2fcommand_2flist_2eproto();

  void InitAsDefaultInstance();
  static list_item* default_instance_;
};
// -------------------------------------------------------------------

class list : public ::google::protobuf::Message {
 public:
  list();
  virtual ~list();

  list(const list& from);

  inline list& operator=(const list& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const list& default_instance();

  void Swap(list* other);

  // implements Message ----------------------------------------------

  list* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const list& from);
  void MergeFrom(const list& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef list_item item;

  // accessors -------------------------------------------------------

  // repeated .store_list.list.item itemlist = 1;
  inline int itemlist_size() const;
  inline void clear_itemlist();
  static const int kItemlistFieldNumber = 1;
  inline const ::store_list::list_item& itemlist(int index) const;
  inline ::store_list::list_item* mutable_itemlist(int index);
  inline ::store_list::list_item* add_itemlist();
  inline const ::google::protobuf::RepeatedPtrField< ::store_list::list_item >&
      itemlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::store_list::list_item >*
      mutable_itemlist();

  // @@protoc_insertion_point(class_scope:store_list.list)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::store_list::list_item > itemlist_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_src_2fcommand_2flist_2eproto();
  friend void protobuf_AssignDesc_src_2fcommand_2flist_2eproto();
  friend void protobuf_ShutdownFile_src_2fcommand_2flist_2eproto();

  void InitAsDefaultInstance();
  static list* default_instance_;
};
// ===================================================================


// ===================================================================

// list_item

// required bytes member = 1;
inline bool list_item::has_member() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void list_item::set_has_member() {
  _has_bits_[0] |= 0x00000001u;
}
inline void list_item::clear_has_member() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void list_item::clear_member() {
  if (member_ != &::google::protobuf::internal::kEmptyString) {
    member_->clear();
  }
  clear_has_member();
}
inline const ::std::string& list_item::member() const {
  return *member_;
}
inline void list_item::set_member(const ::std::string& value) {
  set_has_member();
  if (member_ == &::google::protobuf::internal::kEmptyString) {
    member_ = new ::std::string;
  }
  member_->assign(value);
}
inline void list_item::set_member(const char* value) {
  set_has_member();
  if (member_ == &::google::protobuf::internal::kEmptyString) {
    member_ = new ::std::string;
  }
  member_->assign(value);
}
inline void list_item::set_member(const void* value, size_t size) {
  set_has_member();
  if (member_ == &::google::protobuf::internal::kEmptyString) {
    member_ = new ::std::string;
  }
  member_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* list_item::mutable_member() {
  set_has_member();
  if (member_ == &::google::protobuf::internal::kEmptyString) {
    member_ = new ::std::string;
  }
  return member_;
}
inline ::std::string* list_item::release_member() {
  clear_has_member();
  if (member_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = member_;
    member_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void list_item::set_allocated_member(::std::string* member) {
  if (member_ != &::google::protobuf::internal::kEmptyString) {
    delete member_;
  }
  if (member) {
    set_has_member();
    member_ = member;
  } else {
    clear_has_member();
    member_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes extra = 2;
inline bool list_item::has_extra() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void list_item::set_has_extra() {
  _has_bits_[0] |= 0x00000002u;
}
inline void list_item::clear_has_extra() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void list_item::clear_extra() {
  if (extra_ != &::google::protobuf::internal::kEmptyString) {
    extra_->clear();
  }
  clear_has_extra();
}
inline const ::std::string& list_item::extra() const {
  return *extra_;
}
inline void list_item::set_extra(const ::std::string& value) {
  set_has_extra();
  if (extra_ == &::google::protobuf::internal::kEmptyString) {
    extra_ = new ::std::string;
  }
  extra_->assign(value);
}
inline void list_item::set_extra(const char* value) {
  set_has_extra();
  if (extra_ == &::google::protobuf::internal::kEmptyString) {
    extra_ = new ::std::string;
  }
  extra_->assign(value);
}
inline void list_item::set_extra(const void* value, size_t size) {
  set_has_extra();
  if (extra_ == &::google::protobuf::internal::kEmptyString) {
    extra_ = new ::std::string;
  }
  extra_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* list_item::mutable_extra() {
  set_has_extra();
  if (extra_ == &::google::protobuf::internal::kEmptyString) {
    extra_ = new ::std::string;
  }
  return extra_;
}
inline ::std::string* list_item::release_extra() {
  clear_has_extra();
  if (extra_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = extra_;
    extra_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void list_item::set_allocated_extra(::std::string* extra) {
  if (extra_ != &::google::protobuf::internal::kEmptyString) {
    delete extra_;
  }
  if (extra) {
    set_has_extra();
    extra_ = extra;
  } else {
    clear_has_extra();
    extra_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// list

// repeated .store_list.list.item itemlist = 1;
inline int list::itemlist_size() const {
  return itemlist_.size();
}
inline void list::clear_itemlist() {
  itemlist_.Clear();
}
inline const ::store_list::list_item& list::itemlist(int index) const {
  return itemlist_.Get(index);
}
inline ::store_list::list_item* list::mutable_itemlist(int index) {
  return itemlist_.Mutable(index);
}
inline ::store_list::list_item* list::add_itemlist() {
  return itemlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::store_list::list_item >&
list::itemlist() const {
  return itemlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::store_list::list_item >*
list::mutable_itemlist() {
  return &itemlist_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace store_list

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_src_2fcommand_2flist_2eproto__INCLUDED
