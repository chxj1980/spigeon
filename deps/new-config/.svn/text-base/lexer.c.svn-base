#line 2 "lexer.c"

#line 4 "lexer.c"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
typedef uint64_t flex_uint64_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                yy_size_t yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart (FILE *input_file ,yyscan_t yyscanner );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void yy_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void yy_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void yypop_buffer_state (yyscan_t yyscanner );

static void yyensure_buffer_stack (yyscan_t yyscanner );
static void yy_load_buffer_state (yyscan_t yyscanner );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,yy_size_t len ,yyscan_t yyscanner );

void *yyalloc (yy_size_t ,yyscan_t yyscanner );
void *yyrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void yyfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef yyconst struct yy_trans_info *yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (yy_size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 22
#define YY_END_OF_BUFFER 23
struct yy_trans_info
	{
	flex_int16_t yy_verify;
	flex_int16_t yy_nxt;
	};
static yyconst struct yy_trans_info yy_transition[7178] =
    {
 {   0,   0 }, {   0,6922 }, {   0,   0 }, {   0,6920 }, {   1,3612 },
 {   2,3612 }, {   3,3612 }, {   4,3612 }, {   5,3612 }, {   6,3612 },
 {   7,3612 }, {   8,3612 }, {   9,3614 }, {  10,3614 }, {  11,3612 },
 {  12,3612 }, {  13,3614 }, {  14,3612 }, {  15,3612 }, {  16,3612 },
 {  17,3612 }, {  18,3612 }, {  19,3612 }, {  20,3612 }, {  21,3612 },
 {  22,3612 }, {  23,3612 }, {  24,3612 }, {  25,3612 }, {  26,3612 },
 {  27,3612 }, {  28,3612 }, {  29,3612 }, {  30,3612 }, {  31,3612 },
 {  32,3614 }, {  33,3612 }, {  34,3612 }, {  35,3616 }, {  36,3612 },
 {  37,3612 }, {  38,3612 }, {  39,3612 }, {  40,3612 }, {  41,3612 },
 {  42,3612 }, {  43,3612 }, {  44,3612 }, {  45,3612 }, {  46,3612 },

 {  47,3612 }, {  48,3618 }, {  49,3618 }, {  50,3618 }, {  51,3618 },
 {  52,3618 }, {  53,3618 }, {  54,3618 }, {  55,3618 }, {  56,3618 },
 {  57,3618 }, {  58,3612 }, {  59,3612 }, {  60,3612 }, {  61,3612 },
 {  62,3612 }, {  63,3612 }, {  64,3620 }, {  65,3618 }, {  66,3618 },
 {  67,3618 }, {  68,3618 }, {  69,3618 }, {  70,3618 }, {  71,3618 },
 {  72,3618 }, {  73,3618 }, {  74,3618 }, {  75,3618 }, {  76,3618 },
 {  77,3618 }, {  78,3618 }, {  79,3618 }, {  80,3618 }, {  81,3618 },
 {  82,3618 }, {  83,3618 }, {  84,3618 }, {  85,3618 }, {  86,3618 },
 {  87,3618 }, {  88,3618 }, {  89,3618 }, {  90,3618 }, {  91,3622 },
 {  92,3612 }, {  93,3612 }, {  94,3612 }, {  95,3618 }, {  96,3612 },

 {  97,3618 }, {  98,3618 }, {  99,3618 }, { 100,3618 }, { 101,3618 },
 { 102,3618 }, { 103,3618 }, { 104,3618 }, { 105,3618 }, { 106,3618 },
 { 107,3618 }, { 108,3618 }, { 109,3618 }, { 110,3618 }, { 111,3618 },
 { 112,3618 }, { 113,3618 }, { 114,3618 }, { 115,3618 }, { 116,3618 },
 { 117,3618 }, { 118,3618 }, { 119,3618 }, { 120,3618 }, { 121,3618 },
 { 122,3618 }, { 123,3612 }, { 124,3612 }, { 125,3612 }, { 126,3612 },
 { 127,3612 }, { 128,3612 }, { 129,3612 }, { 130,3612 }, { 131,3612 },
 { 132,3612 }, { 133,3612 }, { 134,3612 }, { 135,3612 }, { 136,3612 },
 { 137,3612 }, { 138,3612 }, { 139,3612 }, { 140,3612 }, { 141,3612 },
 { 142,3612 }, { 143,3612 }, { 144,3612 }, { 145,3612 }, { 146,3612 },

 { 147,3612 }, { 148,3612 }, { 149,3612 }, { 150,3612 }, { 151,3612 },
 { 152,3612 }, { 153,3612 }, { 154,3612 }, { 155,3612 }, { 156,3612 },
 { 157,3612 }, { 158,3612 }, { 159,3612 }, { 160,3612 }, { 161,3612 },
 { 162,3612 }, { 163,3612 }, { 164,3612 }, { 165,3612 }, { 166,3612 },
 { 167,3612 }, { 168,3612 }, { 169,3612 }, { 170,3612 }, { 171,3612 },
 { 172,3612 }, { 173,3612 }, { 174,3612 }, { 175,3612 }, { 176,3612 },
 { 177,3612 }, { 178,3612 }, { 179,3612 }, { 180,3612 }, { 181,3612 },
 { 182,3612 }, { 183,3612 }, { 184,3612 }, { 185,3612 }, { 186,3612 },
 { 187,3612 }, { 188,3612 }, { 189,3612 }, { 190,3612 }, { 191,3612 },
 { 192,3612 }, { 193,3612 }, { 194,3612 }, { 195,3612 }, { 196,3612 },

 { 197,3612 }, { 198,3612 }, { 199,3612 }, { 200,3612 }, { 201,3612 },
 { 202,3612 }, { 203,3612 }, { 204,3612 }, { 205,3612 }, { 206,3612 },
 { 207,3612 }, { 208,3612 }, { 209,3612 }, { 210,3612 }, { 211,3612 },
 { 212,3612 }, { 213,3612 }, { 214,3612 }, { 215,3612 }, { 216,3612 },
 { 217,3612 }, { 218,3612 }, { 219,3612 }, { 220,3612 }, { 221,3612 },
 { 222,3612 }, { 223,3612 }, { 224,3612 }, { 225,3612 }, { 226,3612 },
 { 227,3612 }, { 228,3612 }, { 229,3612 }, { 230,3612 }, { 231,3612 },
 { 232,3612 }, { 233,3612 }, { 234,3612 }, { 235,3612 }, { 236,3612 },
 { 237,3612 }, { 238,3612 }, { 239,3612 }, { 240,3612 }, { 241,3612 },
 { 242,3612 }, { 243,3612 }, { 244,3612 }, { 245,3612 }, { 246,3612 },

 { 247,3612 }, { 248,3612 }, { 249,3612 }, { 250,3612 }, { 251,3612 },
 { 252,3612 }, { 253,3612 }, { 254,3612 }, { 255,3612 }, { 256,3612 },
 {   0,   0 }, {   0,6662 }, {   1,3354 }, {   2,3354 }, {   3,3354 },
 {   4,3354 }, {   5,3354 }, {   6,3354 }, {   7,3354 }, {   8,3354 },
 {   9,3356 }, {  10,3356 }, {  11,3354 }, {  12,3354 }, {  13,3356 },
 {  14,3354 }, {  15,3354 }, {  16,3354 }, {  17,3354 }, {  18,3354 },
 {  19,3354 }, {  20,3354 }, {  21,3354 }, {  22,3354 }, {  23,3354 },
 {  24,3354 }, {  25,3354 }, {  26,3354 }, {  27,3354 }, {  28,3354 },
 {  29,3354 }, {  30,3354 }, {  31,3354 }, {  32,3356 }, {  33,3354 },
 {  34,3354 }, {  35,3358 }, {  36,3354 }, {  37,3354 }, {  38,3354 },

 {  39,3354 }, {  40,3354 }, {  41,3354 }, {  42,3354 }, {  43,3354 },
 {  44,3354 }, {  45,3354 }, {  46,3354 }, {  47,3354 }, {  48,3360 },
 {  49,3360 }, {  50,3360 }, {  51,3360 }, {  52,3360 }, {  53,3360 },
 {  54,3360 }, {  55,3360 }, {  56,3360 }, {  57,3360 }, {  58,3354 },
 {  59,3354 }, {  60,3354 }, {  61,3354 }, {  62,3354 }, {  63,3354 },
 {  64,3362 }, {  65,3360 }, {  66,3360 }, {  67,3360 }, {  68,3360 },
 {  69,3360 }, {  70,3360 }, {  71,3360 }, {  72,3360 }, {  73,3360 },
 {  74,3360 }, {  75,3360 }, {  76,3360 }, {  77,3360 }, {  78,3360 },
 {  79,3360 }, {  80,3360 }, {  81,3360 }, {  82,3360 }, {  83,3360 },
 {  84,3360 }, {  85,3360 }, {  86,3360 }, {  87,3360 }, {  88,3360 },

 {  89,3360 }, {  90,3360 }, {  91,3364 }, {  92,3354 }, {  93,3354 },
 {  94,3354 }, {  95,3360 }, {  96,3354 }, {  97,3360 }, {  98,3360 },
 {  99,3360 }, { 100,3360 }, { 101,3360 }, { 102,3360 }, { 103,3360 },
 { 104,3360 }, { 105,3360 }, { 106,3360 }, { 107,3360 }, { 108,3360 },
 { 109,3360 }, { 110,3360 }, { 111,3360 }, { 112,3360 }, { 113,3360 },
 { 114,3360 }, { 115,3360 }, { 116,3360 }, { 117,3360 }, { 118,3360 },
 { 119,3360 }, { 120,3360 }, { 121,3360 }, { 122,3360 }, { 123,3354 },
 { 124,3354 }, { 125,3354 }, { 126,3354 }, { 127,3354 }, { 128,3354 },
 { 129,3354 }, { 130,3354 }, { 131,3354 }, { 132,3354 }, { 133,3354 },
 { 134,3354 }, { 135,3354 }, { 136,3354 }, { 137,3354 }, { 138,3354 },

 { 139,3354 }, { 140,3354 }, { 141,3354 }, { 142,3354 }, { 143,3354 },
 { 144,3354 }, { 145,3354 }, { 146,3354 }, { 147,3354 }, { 148,3354 },
 { 149,3354 }, { 150,3354 }, { 151,3354 }, { 152,3354 }, { 153,3354 },
 { 154,3354 }, { 155,3354 }, { 156,3354 }, { 157,3354 }, { 158,3354 },
 { 159,3354 }, { 160,3354 }, { 161,3354 }, { 162,3354 }, { 163,3354 },
 { 164,3354 }, { 165,3354 }, { 166,3354 }, { 167,3354 }, { 168,3354 },
 { 169,3354 }, { 170,3354 }, { 171,3354 }, { 172,3354 }, { 173,3354 },
 { 174,3354 }, { 175,3354 }, { 176,3354 }, { 177,3354 }, { 178,3354 },
 { 179,3354 }, { 180,3354 }, { 181,3354 }, { 182,3354 }, { 183,3354 },
 { 184,3354 }, { 185,3354 }, { 186,3354 }, { 187,3354 }, { 188,3354 },

 { 189,3354 }, { 190,3354 }, { 191,3354 }, { 192,3354 }, { 193,3354 },
 { 194,3354 }, { 195,3354 }, { 196,3354 }, { 197,3354 }, { 198,3354 },
 { 199,3354 }, { 200,3354 }, { 201,3354 }, { 202,3354 }, { 203,3354 },
 { 204,3354 }, { 205,3354 }, { 206,3354 }, { 207,3354 }, { 208,3354 },
 { 209,3354 }, { 210,3354 }, { 211,3354 }, { 212,3354 }, { 213,3354 },
 { 214,3354 }, { 215,3354 }, { 216,3354 }, { 217,3354 }, { 218,3354 },
 { 219,3354 }, { 220,3354 }, { 221,3354 }, { 222,3354 }, { 223,3354 },
 { 224,3354 }, { 225,3354 }, { 226,3354 }, { 227,3354 }, { 228,3354 },
 { 229,3354 }, { 230,3354 }, { 231,3354 }, { 232,3354 }, { 233,3354 },
 { 234,3354 }, { 235,3354 }, { 236,3354 }, { 237,3354 }, { 238,3354 },

 { 239,3354 }, { 240,3354 }, { 241,3354 }, { 242,3354 }, { 243,3354 },
 { 244,3354 }, { 245,3354 }, { 246,3354 }, { 247,3354 }, { 248,3354 },
 { 249,3354 }, { 250,3354 }, { 251,3354 }, { 252,3354 }, { 253,3354 },
 { 254,3354 }, { 255,3354 }, { 256,3354 }, {   0,   0 }, {   0,6404 },
 {   1,3226 }, {   2,3226 }, {   3,3226 }, {   4,3226 }, {   5,3226 },
 {   6,3226 }, {   7,3226 }, {   8,3226 }, {   9,3108 }, {  10,3110 },
 {  11,3226 }, {  12,3226 }, {  13,3226 }, {  14,3226 }, {  15,3226 },
 {  16,3226 }, {  17,3226 }, {  18,3226 }, {  19,3226 }, {  20,3226 },
 {  21,3226 }, {  22,3226 }, {  23,3226 }, {  24,3226 }, {  25,3226 },
 {  26,3226 }, {  27,3226 }, {  28,3226 }, {  29,3226 }, {  30,3226 },

 {  31,3226 }, {  32,3108 }, {  33,3226 }, {  34,3112 }, {  35,3114 },
 {  36,3226 }, {  37,3226 }, {  38,3226 }, {  39,3226 }, {  40,3226 },
 {  41,3226 }, {  42,3226 }, {  43,3226 }, {  44,3226 }, {  45,3226 },
 {  46,3226 }, {  47,3226 }, {  48,3226 }, {  49,3226 }, {  50,3226 },
 {  51,3226 }, {  52,3226 }, {  53,3226 }, {  54,3226 }, {  55,3226 },
 {  56,3226 }, {  57,3226 }, {  58,3226 }, {  59,3226 }, {  60,3226 },
 {  61,3226 }, {  62,3226 }, {  63,3226 }, {  64,3226 }, {  65,3226 },
 {  66,3226 }, {  67,3226 }, {  68,3226 }, {  69,3226 }, {  70,3226 },
 {  71,3226 }, {  72,3226 }, {  73,3226 }, {  74,3226 }, {  75,3226 },
 {  76,3226 }, {  77,3226 }, {  78,3226 }, {  79,3226 }, {  80,3226 },

 {  81,3226 }, {  82,3226 }, {  83,3226 }, {  84,3226 }, {  85,3226 },
 {  86,3226 }, {  87,3226 }, {  88,3226 }, {  89,3226 }, {  90,3226 },
 {  91,3226 }, {  92,3226 }, {  93,3226 }, {  94,3226 }, {  95,3226 },
 {  96,3226 }, {  97,3226 }, {  98,3226 }, {  99,3226 }, { 100,3226 },
 { 101,3226 }, { 102,3226 }, { 103,3226 }, { 104,3226 }, { 105,3226 },
 { 106,3226 }, { 107,3226 }, { 108,3226 }, { 109,3226 }, { 110,3226 },
 { 111,3226 }, { 112,3226 }, { 113,3226 }, { 114,3226 }, { 115,3226 },
 { 116,3226 }, { 117,3226 }, { 118,3226 }, { 119,3226 }, { 120,3226 },
 { 121,3226 }, { 122,3226 }, { 123,3226 }, { 124,3226 }, { 125,3226 },
 { 126,3226 }, { 127,3226 }, { 128,3226 }, { 129,3226 }, { 130,3226 },

 { 131,3226 }, { 132,3226 }, { 133,3226 }, { 134,3226 }, { 135,3226 },
 { 136,3226 }, { 137,3226 }, { 138,3226 }, { 139,3226 }, { 140,3226 },
 { 141,3226 }, { 142,3226 }, { 143,3226 }, { 144,3226 }, { 145,3226 },
 { 146,3226 }, { 147,3226 }, { 148,3226 }, { 149,3226 }, { 150,3226 },
 { 151,3226 }, { 152,3226 }, { 153,3226 }, { 154,3226 }, { 155,3226 },
 { 156,3226 }, { 157,3226 }, { 158,3226 }, { 159,3226 }, { 160,3226 },
 { 161,3226 }, { 162,3226 }, { 163,3226 }, { 164,3226 }, { 165,3226 },
 { 166,3226 }, { 167,3226 }, { 168,3226 }, { 169,3226 }, { 170,3226 },
 { 171,3226 }, { 172,3226 }, { 173,3226 }, { 174,3226 }, { 175,3226 },
 { 176,3226 }, { 177,3226 }, { 178,3226 }, { 179,3226 }, { 180,3226 },

 { 181,3226 }, { 182,3226 }, { 183,3226 }, { 184,3226 }, { 185,3226 },
 { 186,3226 }, { 187,3226 }, { 188,3226 }, { 189,3226 }, { 190,3226 },
 { 191,3226 }, { 192,3226 }, { 193,3226 }, { 194,3226 }, { 195,3226 },
 { 196,3226 }, { 197,3226 }, { 198,3226 }, { 199,3226 }, { 200,3226 },
 { 201,3226 }, { 202,3226 }, { 203,3226 }, { 204,3226 }, { 205,3226 },
 { 206,3226 }, { 207,3226 }, { 208,3226 }, { 209,3226 }, { 210,3226 },
 { 211,3226 }, { 212,3226 }, { 213,3226 }, { 214,3226 }, { 215,3226 },
 { 216,3226 }, { 217,3226 }, { 218,3226 }, { 219,3226 }, { 220,3226 },
 { 221,3226 }, { 222,3226 }, { 223,3226 }, { 224,3226 }, { 225,3226 },
 { 226,3226 }, { 227,3226 }, { 228,3226 }, { 229,3226 }, { 230,3226 },

 { 231,3226 }, { 232,3226 }, { 233,3226 }, { 234,3226 }, { 235,3226 },
 { 236,3226 }, { 237,3226 }, { 238,3226 }, { 239,3226 }, { 240,3226 },
 { 241,3226 }, { 242,3226 }, { 243,3226 }, { 244,3226 }, { 245,3226 },
 { 246,3226 }, { 247,3226 }, { 248,3226 }, { 249,3226 }, { 250,3226 },
 { 251,3226 }, { 252,3226 }, { 253,3226 }, { 254,3226 }, { 255,3226 },
 { 256,3226 }, {   0,   0 }, {   0,6146 }, {   1,2968 }, {   2,2968 },
 {   3,2968 }, {   4,2968 }, {   5,2968 }, {   6,2968 }, {   7,2968 },
 {   8,2968 }, {   9,2850 }, {  10,2852 }, {  11,2968 }, {  12,2968 },
 {  13,2968 }, {  14,2968 }, {  15,2968 }, {  16,2968 }, {  17,2968 },
 {  18,2968 }, {  19,2968 }, {  20,2968 }, {  21,2968 }, {  22,2968 },

 {  23,2968 }, {  24,2968 }, {  25,2968 }, {  26,2968 }, {  27,2968 },
 {  28,2968 }, {  29,2968 }, {  30,2968 }, {  31,2968 }, {  32,2850 },
 {  33,2968 }, {  34,2854 }, {  35,2856 }, {  36,2968 }, {  37,2968 },
 {  38,2968 }, {  39,2968 }, {  40,2968 }, {  41,2968 }, {  42,2968 },
 {  43,2968 }, {  44,2968 }, {  45,2968 }, {  46,2968 }, {  47,2968 },
 {  48,2968 }, {  49,2968 }, {  50,2968 }, {  51,2968 }, {  52,2968 },
 {  53,2968 }, {  54,2968 }, {  55,2968 }, {  56,2968 }, {  57,2968 },
 {  58,2968 }, {  59,2968 }, {  60,2968 }, {  61,2968 }, {  62,2968 },
 {  63,2968 }, {  64,2968 }, {  65,2968 }, {  66,2968 }, {  67,2968 },
 {  68,2968 }, {  69,2968 }, {  70,2968 }, {  71,2968 }, {  72,2968 },

 {  73,2968 }, {  74,2968 }, {  75,2968 }, {  76,2968 }, {  77,2968 },
 {  78,2968 }, {  79,2968 }, {  80,2968 }, {  81,2968 }, {  82,2968 },
 {  83,2968 }, {  84,2968 }, {  85,2968 }, {  86,2968 }, {  87,2968 },
 {  88,2968 }, {  89,2968 }, {  90,2968 }, {  91,2968 }, {  92,2968 },
 {  93,2968 }, {  94,2968 }, {  95,2968 }, {  96,2968 }, {  97,2968 },
 {  98,2968 }, {  99,2968 }, { 100,2968 }, { 101,2968 }, { 102,2968 },
 { 103,2968 }, { 104,2968 }, { 105,2968 }, { 106,2968 }, { 107,2968 },
 { 108,2968 }, { 109,2968 }, { 110,2968 }, { 111,2968 }, { 112,2968 },
 { 113,2968 }, { 114,2968 }, { 115,2968 }, { 116,2968 }, { 117,2968 },
 { 118,2968 }, { 119,2968 }, { 120,2968 }, { 121,2968 }, { 122,2968 },

 { 123,2968 }, { 124,2968 }, { 125,2968 }, { 126,2968 }, { 127,2968 },
 { 128,2968 }, { 129,2968 }, { 130,2968 }, { 131,2968 }, { 132,2968 },
 { 133,2968 }, { 134,2968 }, { 135,2968 }, { 136,2968 }, { 137,2968 },
 { 138,2968 }, { 139,2968 }, { 140,2968 }, { 141,2968 }, { 142,2968 },
 { 143,2968 }, { 144,2968 }, { 145,2968 }, { 146,2968 }, { 147,2968 },
 { 148,2968 }, { 149,2968 }, { 150,2968 }, { 151,2968 }, { 152,2968 },
 { 153,2968 }, { 154,2968 }, { 155,2968 }, { 156,2968 }, { 157,2968 },
 { 158,2968 }, { 159,2968 }, { 160,2968 }, { 161,2968 }, { 162,2968 },
 { 163,2968 }, { 164,2968 }, { 165,2968 }, { 166,2968 }, { 167,2968 },
 { 168,2968 }, { 169,2968 }, { 170,2968 }, { 171,2968 }, { 172,2968 },

 { 173,2968 }, { 174,2968 }, { 175,2968 }, { 176,2968 }, { 177,2968 },
 { 178,2968 }, { 179,2968 }, { 180,2968 }, { 181,2968 }, { 182,2968 },
 { 183,2968 }, { 184,2968 }, { 185,2968 }, { 186,2968 }, { 187,2968 },
 { 188,2968 }, { 189,2968 }, { 190,2968 }, { 191,2968 }, { 192,2968 },
 { 193,2968 }, { 194,2968 }, { 195,2968 }, { 196,2968 }, { 197,2968 },
 { 198,2968 }, { 199,2968 }, { 200,2968 }, { 201,2968 }, { 202,2968 },
 { 203,2968 }, { 204,2968 }, { 205,2968 }, { 206,2968 }, { 207,2968 },
 { 208,2968 }, { 209,2968 }, { 210,2968 }, { 211,2968 }, { 212,2968 },
 { 213,2968 }, { 214,2968 }, { 215,2968 }, { 216,2968 }, { 217,2968 },
 { 218,2968 }, { 219,2968 }, { 220,2968 }, { 221,2968 }, { 222,2968 },

 { 223,2968 }, { 224,2968 }, { 225,2968 }, { 226,2968 }, { 227,2968 },
 { 228,2968 }, { 229,2968 }, { 230,2968 }, { 231,2968 }, { 232,2968 },
 { 233,2968 }, { 234,2968 }, { 235,2968 }, { 236,2968 }, { 237,2968 },
 { 238,2968 }, { 239,2968 }, { 240,2968 }, { 241,2968 }, { 242,2968 },
 { 243,2968 }, { 244,2968 }, { 245,2968 }, { 246,2968 }, { 247,2968 },
 { 248,2968 }, { 249,2968 }, { 250,2968 }, { 251,2968 }, { 252,2968 },
 { 253,2968 }, { 254,2968 }, { 255,2968 }, { 256,2968 }, {   0,   0 },
 {   0,5888 }, {   1,2580 }, {   2,2580 }, {   3,2580 }, {   4,2580 },
 {   5,2580 }, {   6,2580 }, {   7,2580 }, {   8,2580 }, {   9,2600 },
 {  10,2602 }, {  11,2580 }, {  12,2580 }, {  13,2580 }, {  14,2580 },

 {  15,2580 }, {  16,2580 }, {  17,2580 }, {  18,2580 }, {  19,2580 },
 {  20,2580 }, {  21,2580 }, {  22,2580 }, {  23,2580 }, {  24,2580 },
 {  25,2580 }, {  26,2580 }, {  27,2580 }, {  28,2580 }, {  29,2580 },
 {  30,2580 }, {  31,2580 }, {  32,2600 }, {  33,2580 }, {  34,2580 },
 {  35,2580 }, {  36,2580 }, {  37,2580 }, {  38,2580 }, {  39,2580 },
 {  40,2580 }, {  41,2580 }, {  42,2580 }, {  43,2580 }, {  44,2580 },
 {  45,2580 }, {  46,2580 }, {  47,2580 }, {  48,2580 }, {  49,2580 },
 {  50,2580 }, {  51,2580 }, {  52,2580 }, {  53,2580 }, {  54,2580 },
 {  55,2580 }, {  56,2580 }, {  57,2580 }, {  58,2604 }, {  59,2580 },
 {  60,2580 }, {  61,2580 }, {  62,2580 }, {  63,2580 }, {  64,2580 },

 {  65,2580 }, {  66,2580 }, {  67,2580 }, {  68,2580 }, {  69,2580 },
 {  70,2580 }, {  71,2580 }, {  72,2580 }, {  73,2580 }, {  74,2580 },
 {  75,2580 }, {  76,2580 }, {  77,2580 }, {  78,2580 }, {  79,2580 },
 {  80,2580 }, {  81,2580 }, {  82,2580 }, {  83,2580 }, {  84,2580 },
 {  85,2580 }, {  86,2580 }, {  87,2580 }, {  88,2580 }, {  89,2580 },
 {  90,2580 }, {  91,2580 }, {  92,2580 }, {  93,2580 }, {  94,2580 },
 {  95,2580 }, {  96,2580 }, {  97,2580 }, {  98,2580 }, {  99,2580 },
 { 100,2580 }, { 101,2580 }, { 102,2580 }, { 103,2580 }, { 104,2580 },
 { 105,2580 }, { 106,2580 }, { 107,2580 }, { 108,2580 }, { 109,2580 },
 { 110,2580 }, { 111,2580 }, { 112,2580 }, { 113,2580 }, { 114,2580 },

 { 115,2580 }, { 116,2580 }, { 117,2580 }, { 118,2580 }, { 119,2580 },
 { 120,2580 }, { 121,2580 }, { 122,2580 }, { 123,2580 }, { 124,2580 },
 { 125,2580 }, { 126,2580 }, { 127,2580 }, { 128,2580 }, { 129,2580 },
 { 130,2580 }, { 131,2580 }, { 132,2580 }, { 133,2580 }, { 134,2580 },
 { 135,2580 }, { 136,2580 }, { 137,2580 }, { 138,2580 }, { 139,2580 },
 { 140,2580 }, { 141,2580 }, { 142,2580 }, { 143,2580 }, { 144,2580 },
 { 145,2580 }, { 146,2580 }, { 147,2580 }, { 148,2580 }, { 149,2580 },
 { 150,2580 }, { 151,2580 }, { 152,2580 }, { 153,2580 }, { 154,2580 },
 { 155,2580 }, { 156,2580 }, { 157,2580 }, { 158,2580 }, { 159,2580 },
 { 160,2580 }, { 161,2580 }, { 162,2580 }, { 163,2580 }, { 164,2580 },

 { 165,2580 }, { 166,2580 }, { 167,2580 }, { 168,2580 }, { 169,2580 },
 { 170,2580 }, { 171,2580 }, { 172,2580 }, { 173,2580 }, { 174,2580 },
 { 175,2580 }, { 176,2580 }, { 177,2580 }, { 178,2580 }, { 179,2580 },
 { 180,2580 }, { 181,2580 }, { 182,2580 }, { 183,2580 }, { 184,2580 },
 { 185,2580 }, { 186,2580 }, { 187,2580 }, { 188,2580 }, { 189,2580 },
 { 190,2580 }, { 191,2580 }, { 192,2580 }, { 193,2580 }, { 194,2580 },
 { 195,2580 }, { 196,2580 }, { 197,2580 }, { 198,2580 }, { 199,2580 },
 { 200,2580 }, { 201,2580 }, { 202,2580 }, { 203,2580 }, { 204,2580 },
 { 205,2580 }, { 206,2580 }, { 207,2580 }, { 208,2580 }, { 209,2580 },
 { 210,2580 }, { 211,2580 }, { 212,2580 }, { 213,2580 }, { 214,2580 },

 { 215,2580 }, { 216,2580 }, { 217,2580 }, { 218,2580 }, { 219,2580 },
 { 220,2580 }, { 221,2580 }, { 222,2580 }, { 223,2580 }, { 224,2580 },
 { 225,2580 }, { 226,2580 }, { 227,2580 }, { 228,2580 }, { 229,2580 },
 { 230,2580 }, { 231,2580 }, { 232,2580 }, { 233,2580 }, { 234,2580 },
 { 235,2580 }, { 236,2580 }, { 237,2580 }, { 238,2580 }, { 239,2580 },
 { 240,2580 }, { 241,2580 }, { 242,2580 }, { 243,2580 }, { 244,2580 },
 { 245,2580 }, { 246,2580 }, { 247,2580 }, { 248,2580 }, { 249,2580 },
 { 250,2580 }, { 251,2580 }, { 252,2580 }, { 253,2580 }, { 254,2580 },
 { 255,2580 }, { 256,2580 }, {   0,   0 }, {   0,5630 }, {   1,2322 },
 {   2,2322 }, {   3,2322 }, {   4,2322 }, {   5,2322 }, {   6,2322 },

 {   7,2322 }, {   8,2322 }, {   9,2342 }, {  10,2344 }, {  11,2322 },
 {  12,2322 }, {  13,2322 }, {  14,2322 }, {  15,2322 }, {  16,2322 },
 {  17,2322 }, {  18,2322 }, {  19,2322 }, {  20,2322 }, {  21,2322 },
 {  22,2322 }, {  23,2322 }, {  24,2322 }, {  25,2322 }, {  26,2322 },
 {  27,2322 }, {  28,2322 }, {  29,2322 }, {  30,2322 }, {  31,2322 },
 {  32,2342 }, {  33,2322 }, {  34,2322 }, {  35,2322 }, {  36,2322 },
 {  37,2322 }, {  38,2322 }, {  39,2322 }, {  40,2322 }, {  41,2322 },
 {  42,2322 }, {  43,2322 }, {  44,2322 }, {  45,2322 }, {  46,2322 },
 {  47,2322 }, {  48,2322 }, {  49,2322 }, {  50,2322 }, {  51,2322 },
 {  52,2322 }, {  53,2322 }, {  54,2322 }, {  55,2322 }, {  56,2322 },

 {  57,2322 }, {  58,2346 }, {  59,2322 }, {  60,2322 }, {  61,2322 },
 {  62,2322 }, {  63,2322 }, {  64,2322 }, {  65,2322 }, {  66,2322 },
 {  67,2322 }, {  68,2322 }, {  69,2322 }, {  70,2322 }, {  71,2322 },
 {  72,2322 }, {  73,2322 }, {  74,2322 }, {  75,2322 }, {  76,2322 },
 {  77,2322 }, {  78,2322 }, {  79,2322 }, {  80,2322 }, {  81,2322 },
 {  82,2322 }, {  83,2322 }, {  84,2322 }, {  85,2322 }, {  86,2322 },
 {  87,2322 }, {  88,2322 }, {  89,2322 }, {  90,2322 }, {  91,2322 },
 {  92,2322 }, {  93,2322 }, {  94,2322 }, {  95,2322 }, {  96,2322 },
 {  97,2322 }, {  98,2322 }, {  99,2322 }, { 100,2322 }, { 101,2322 },
 { 102,2322 }, { 103,2322 }, { 104,2322 }, { 105,2322 }, { 106,2322 },

 { 107,2322 }, { 108,2322 }, { 109,2322 }, { 110,2322 }, { 111,2322 },
 { 112,2322 }, { 113,2322 }, { 114,2322 }, { 115,2322 }, { 116,2322 },
 { 117,2322 }, { 118,2322 }, { 119,2322 }, { 120,2322 }, { 121,2322 },
 { 122,2322 }, { 123,2322 }, { 124,2322 }, { 125,2322 }, { 126,2322 },
 { 127,2322 }, { 128,2322 }, { 129,2322 }, { 130,2322 }, { 131,2322 },
 { 132,2322 }, { 133,2322 }, { 134,2322 }, { 135,2322 }, { 136,2322 },
 { 137,2322 }, { 138,2322 }, { 139,2322 }, { 140,2322 }, { 141,2322 },
 { 142,2322 }, { 143,2322 }, { 144,2322 }, { 145,2322 }, { 146,2322 },
 { 147,2322 }, { 148,2322 }, { 149,2322 }, { 150,2322 }, { 151,2322 },
 { 152,2322 }, { 153,2322 }, { 154,2322 }, { 155,2322 }, { 156,2322 },

 { 157,2322 }, { 158,2322 }, { 159,2322 }, { 160,2322 }, { 161,2322 },
 { 162,2322 }, { 163,2322 }, { 164,2322 }, { 165,2322 }, { 166,2322 },
 { 167,2322 }, { 168,2322 }, { 169,2322 }, { 170,2322 }, { 171,2322 },
 { 172,2322 }, { 173,2322 }, { 174,2322 }, { 175,2322 }, { 176,2322 },
 { 177,2322 }, { 178,2322 }, { 179,2322 }, { 180,2322 }, { 181,2322 },
 { 182,2322 }, { 183,2322 }, { 184,2322 }, { 185,2322 }, { 186,2322 },
 { 187,2322 }, { 188,2322 }, { 189,2322 }, { 190,2322 }, { 191,2322 },
 { 192,2322 }, { 193,2322 }, { 194,2322 }, { 195,2322 }, { 196,2322 },
 { 197,2322 }, { 198,2322 }, { 199,2322 }, { 200,2322 }, { 201,2322 },
 { 202,2322 }, { 203,2322 }, { 204,2322 }, { 205,2322 }, { 206,2322 },

 { 207,2322 }, { 208,2322 }, { 209,2322 }, { 210,2322 }, { 211,2322 },
 { 212,2322 }, { 213,2322 }, { 214,2322 }, { 215,2322 }, { 216,2322 },
 { 217,2322 }, { 218,2322 }, { 219,2322 }, { 220,2322 }, { 221,2322 },
 { 222,2322 }, { 223,2322 }, { 224,2322 }, { 225,2322 }, { 226,2322 },
 { 227,2322 }, { 228,2322 }, { 229,2322 }, { 230,2322 }, { 231,2322 },
 { 232,2322 }, { 233,2322 }, { 234,2322 }, { 235,2322 }, { 236,2322 },
 { 237,2322 }, { 238,2322 }, { 239,2322 }, { 240,2322 }, { 241,2322 },
 { 242,2322 }, { 243,2322 }, { 244,2322 }, { 245,2322 }, { 246,2322 },
 { 247,2322 }, { 248,2322 }, { 249,2322 }, { 250,2322 }, { 251,2322 },
 { 252,2322 }, { 253,2322 }, { 254,2322 }, { 255,2322 }, { 256,2322 },

 {   0,  19 }, {   0,5372 }, {   1,2452 }, {   2,2452 }, {   3,2452 },
 {   4,2452 }, {   5,2452 }, {   6,2452 }, {   7,2452 }, {   8,2452 },
 {   9,2452 }, {  10,2064 }, {  11,2452 }, {  12,2452 }, {  13,2452 },
 {  14,2452 }, {  15,2452 }, {  16,2452 }, {  17,2452 }, {  18,2452 },
 {  19,2452 }, {  20,2452 }, {  21,2452 }, {  22,2452 }, {  23,2452 },
 {  24,2452 }, {  25,2452 }, {  26,2452 }, {  27,2452 }, {  28,2452 },
 {  29,2452 }, {  30,2452 }, {  31,2452 }, {  32,2452 }, {  33,2452 },
 {  34,2064 }, {  35,2452 }, {  36,2452 }, {  37,2452 }, {  38,2452 },
 {  39,2452 }, {  40,2452 }, {  41,2452 }, {  42,2452 }, {  43,2452 },
 {  44,2452 }, {  45,2452 }, {  46,2452 }, {  47,2452 }, {  48,2452 },

 {  49,2452 }, {  50,2452 }, {  51,2452 }, {  52,2452 }, {  53,2452 },
 {  54,2452 }, {  55,2452 }, {  56,2452 }, {  57,2452 }, {  58,2452 },
 {  59,2452 }, {  60,2452 }, {  61,2452 }, {  62,2452 }, {  63,2452 },
 {  64,2452 }, {  65,2452 }, {  66,2452 }, {  67,2452 }, {  68,2452 },
 {  69,2452 }, {  70,2452 }, {  71,2452 }, {  72,2452 }, {  73,2452 },
 {  74,2452 }, {  75,2452 }, {  76,2452 }, {  77,2452 }, {  78,2452 },
 {  79,2452 }, {  80,2452 }, {  81,2452 }, {  82,2452 }, {  83,2452 },
 {  84,2452 }, {  85,2452 }, {  86,2452 }, {  87,2452 }, {  88,2452 },
 {  89,2452 }, {  90,2452 }, {  91,2452 }, {  92,2710 }, {  93,2452 },
 {  94,2452 }, {  95,2452 }, {  96,2452 }, {  97,2452 }, {  98,2452 },

 {  99,2452 }, { 100,2452 }, { 101,2452 }, { 102,2452 }, { 103,2452 },
 { 104,2452 }, { 105,2452 }, { 106,2452 }, { 107,2452 }, { 108,2452 },
 { 109,2452 }, { 110,2452 }, { 111,2452 }, { 112,2452 }, { 113,2452 },
 { 114,2452 }, { 115,2452 }, { 116,2452 }, { 117,2452 }, { 118,2452 },
 { 119,2452 }, { 120,2452 }, { 121,2452 }, { 122,2452 }, { 123,2452 },
 { 124,2452 }, { 125,2452 }, { 126,2452 }, { 127,2452 }, { 128,2452 },
 { 129,2452 }, { 130,2452 }, { 131,2452 }, { 132,2452 }, { 133,2452 },
 { 134,2452 }, { 135,2452 }, { 136,2452 }, { 137,2452 }, { 138,2452 },
 { 139,2452 }, { 140,2452 }, { 141,2452 }, { 142,2452 }, { 143,2452 },
 { 144,2452 }, { 145,2452 }, { 146,2452 }, { 147,2452 }, { 148,2452 },

 { 149,2452 }, { 150,2452 }, { 151,2452 }, { 152,2452 }, { 153,2452 },
 { 154,2452 }, { 155,2452 }, { 156,2452 }, { 157,2452 }, { 158,2452 },
 { 159,2452 }, { 160,2452 }, { 161,2452 }, { 162,2452 }, { 163,2452 },
 { 164,2452 }, { 165,2452 }, { 166,2452 }, { 167,2452 }, { 168,2452 },
 { 169,2452 }, { 170,2452 }, { 171,2452 }, { 172,2452 }, { 173,2452 },
 { 174,2452 }, { 175,2452 }, { 176,2452 }, { 177,2452 }, { 178,2452 },
 { 179,2452 }, { 180,2452 }, { 181,2452 }, { 182,2452 }, { 183,2452 },
 { 184,2452 }, { 185,2452 }, { 186,2452 }, { 187,2452 }, { 188,2452 },
 { 189,2452 }, { 190,2452 }, { 191,2452 }, { 192,2452 }, { 193,2452 },
 { 194,2452 }, { 195,2452 }, { 196,2452 }, { 197,2452 }, { 198,2452 },

 { 199,2452 }, { 200,2452 }, { 201,2452 }, { 202,2452 }, { 203,2452 },
 { 204,2452 }, { 205,2452 }, { 206,2452 }, { 207,2452 }, { 208,2452 },
 { 209,2452 }, { 210,2452 }, { 211,2452 }, { 212,2452 }, { 213,2452 },
 { 214,2452 }, { 215,2452 }, { 216,2452 }, { 217,2452 }, { 218,2452 },
 { 219,2452 }, { 220,2452 }, { 221,2452 }, { 222,2452 }, { 223,2452 },
 { 224,2452 }, { 225,2452 }, { 226,2452 }, { 227,2452 }, { 228,2452 },
 { 229,2452 }, { 230,2452 }, { 231,2452 }, { 232,2452 }, { 233,2452 },
 { 234,2452 }, { 235,2452 }, { 236,2452 }, { 237,2452 }, { 238,2452 },
 { 239,2452 }, { 240,2452 }, { 241,2452 }, { 242,2452 }, { 243,2452 },
 { 244,2452 }, { 245,2452 }, { 246,2452 }, { 247,2452 }, { 248,2452 },

 { 249,2452 }, { 250,2452 }, { 251,2452 }, { 252,2452 }, { 253,2452 },
 { 254,2452 }, { 255,2452 }, { 256,2452 }, {   0,  19 }, {   0,5114 },
 {   1,2194 }, {   2,2194 }, {   3,2194 }, {   4,2194 }, {   5,2194 },
 {   6,2194 }, {   7,2194 }, {   8,2194 }, {   9,2194 }, {  10,1806 },
 {  11,2194 }, {  12,2194 }, {  13,2194 }, {  14,2194 }, {  15,2194 },
 {  16,2194 }, {  17,2194 }, {  18,2194 }, {  19,2194 }, {  20,2194 },
 {  21,2194 }, {  22,2194 }, {  23,2194 }, {  24,2194 }, {  25,2194 },
 {  26,2194 }, {  27,2194 }, {  28,2194 }, {  29,2194 }, {  30,2194 },
 {  31,2194 }, {  32,2194 }, {  33,2194 }, {  34,1806 }, {  35,2194 },
 {  36,2194 }, {  37,2194 }, {  38,2194 }, {  39,2194 }, {  40,2194 },

 {  41,2194 }, {  42,2194 }, {  43,2194 }, {  44,2194 }, {  45,2194 },
 {  46,2194 }, {  47,2194 }, {  48,2194 }, {  49,2194 }, {  50,2194 },
 {  51,2194 }, {  52,2194 }, {  53,2194 }, {  54,2194 }, {  55,2194 },
 {  56,2194 }, {  57,2194 }, {  58,2194 }, {  59,2194 }, {  60,2194 },
 {  61,2194 }, {  62,2194 }, {  63,2194 }, {  64,2194 }, {  65,2194 },
 {  66,2194 }, {  67,2194 }, {  68,2194 }, {  69,2194 }, {  70,2194 },
 {  71,2194 }, {  72,2194 }, {  73,2194 }, {  74,2194 }, {  75,2194 },
 {  76,2194 }, {  77,2194 }, {  78,2194 }, {  79,2194 }, {  80,2194 },
 {  81,2194 }, {  82,2194 }, {  83,2194 }, {  84,2194 }, {  85,2194 },
 {  86,2194 }, {  87,2194 }, {  88,2194 }, {  89,2194 }, {  90,2194 },

 {  91,2194 }, {  92,2452 }, {  93,2194 }, {  94,2194 }, {  95,2194 },
 {  96,2194 }, {  97,2194 }, {  98,2194 }, {  99,2194 }, { 100,2194 },
 { 101,2194 }, { 102,2194 }, { 103,2194 }, { 104,2194 }, { 105,2194 },
 { 106,2194 }, { 107,2194 }, { 108,2194 }, { 109,2194 }, { 110,2194 },
 { 111,2194 }, { 112,2194 }, { 113,2194 }, { 114,2194 }, { 115,2194 },
 { 116,2194 }, { 117,2194 }, { 118,2194 }, { 119,2194 }, { 120,2194 },
 { 121,2194 }, { 122,2194 }, { 123,2194 }, { 124,2194 }, { 125,2194 },
 { 126,2194 }, { 127,2194 }, { 128,2194 }, { 129,2194 }, { 130,2194 },
 { 131,2194 }, { 132,2194 }, { 133,2194 }, { 134,2194 }, { 135,2194 },
 { 136,2194 }, { 137,2194 }, { 138,2194 }, { 139,2194 }, { 140,2194 },

 { 141,2194 }, { 142,2194 }, { 143,2194 }, { 144,2194 }, { 145,2194 },
 { 146,2194 }, { 147,2194 }, { 148,2194 }, { 149,2194 }, { 150,2194 },
 { 151,2194 }, { 152,2194 }, { 153,2194 }, { 154,2194 }, { 155,2194 },
 { 156,2194 }, { 157,2194 }, { 158,2194 }, { 159,2194 }, { 160,2194 },
 { 161,2194 }, { 162,2194 }, { 163,2194 }, { 164,2194 }, { 165,2194 },
 { 166,2194 }, { 167,2194 }, { 168,2194 }, { 169,2194 }, { 170,2194 },
 { 171,2194 }, { 172,2194 }, { 173,2194 }, { 174,2194 }, { 175,2194 },
 { 176,2194 }, { 177,2194 }, { 178,2194 }, { 179,2194 }, { 180,2194 },
 { 181,2194 }, { 182,2194 }, { 183,2194 }, { 184,2194 }, { 185,2194 },
 { 186,2194 }, { 187,2194 }, { 188,2194 }, { 189,2194 }, { 190,2194 },

 { 191,2194 }, { 192,2194 }, { 193,2194 }, { 194,2194 }, { 195,2194 },
 { 196,2194 }, { 197,2194 }, { 198,2194 }, { 199,2194 }, { 200,2194 },
 { 201,2194 }, { 202,2194 }, { 203,2194 }, { 204,2194 }, { 205,2194 },
 { 206,2194 }, { 207,2194 }, { 208,2194 }, { 209,2194 }, { 210,2194 },
 { 211,2194 }, { 212,2194 }, { 213,2194 }, { 214,2194 }, { 215,2194 },
 { 216,2194 }, { 217,2194 }, { 218,2194 }, { 219,2194 }, { 220,2194 },
 { 221,2194 }, { 222,2194 }, { 223,2194 }, { 224,2194 }, { 225,2194 },
 { 226,2194 }, { 227,2194 }, { 228,2194 }, { 229,2194 }, { 230,2194 },
 { 231,2194 }, { 232,2194 }, { 233,2194 }, { 234,2194 }, { 235,2194 },
 { 236,2194 }, { 237,2194 }, { 238,2194 }, { 239,2194 }, { 240,2194 },

 { 241,2194 }, { 242,2194 }, { 243,2194 }, { 244,2194 }, { 245,2194 },
 { 246,2194 }, { 247,2194 }, { 248,2194 }, { 249,2194 }, { 250,2194 },
 { 251,2194 }, { 252,2194 }, { 253,2194 }, { 254,2194 }, { 255,2194 },
 { 256,2194 }, {   0,   0 }, {   0,4856 }, {   1,1574 }, {   2,1574 },
 {   3,1574 }, {   4,1574 }, {   5,1574 }, {   6,1574 }, {   7,1574 },
 {   8,1574 }, {   9,1574 }, {  10,1576 }, {  11,1574 }, {  12,1574 },
 {  13,1574 }, {  14,1574 }, {  15,1574 }, {  16,1574 }, {  17,1574 },
 {  18,1574 }, {  19,1574 }, {  20,1574 }, {  21,1574 }, {  22,1574 },
 {  23,1574 }, {  24,1574 }, {  25,1574 }, {  26,1574 }, {  27,1574 },
 {  28,1574 }, {  29,1574 }, {  30,1574 }, {  31,1574 }, {  32,1574 },

 {  33,1574 }, {  34,1574 }, {  35,1574 }, {  36,1574 }, {  37,1574 },
 {  38,1574 }, {  39,1574 }, {  40,1574 }, {  41,1574 }, {  42,1574 },
 {  43,1574 }, {  44,1574 }, {  45,1574 }, {  46,1574 }, {  47,1574 },
 {  48,1574 }, {  49,1574 }, {  50,1574 }, {  51,1574 }, {  52,1574 },
 {  53,1574 }, {  54,1574 }, {  55,1574 }, {  56,1574 }, {  57,1574 },
 {  58,1574 }, {  59,1574 }, {  60,1574 }, {  61,1574 }, {  62,1574 },
 {  63,1574 }, {  64,1574 }, {  65,1574 }, {  66,1574 }, {  67,1574 },
 {  68,1574 }, {  69,1574 }, {  70,1574 }, {  71,1574 }, {  72,1574 },
 {  73,1574 }, {  74,1574 }, {  75,1574 }, {  76,1574 }, {  77,1574 },
 {  78,1574 }, {  79,1574 }, {  80,1574 }, {  81,1574 }, {  82,1574 },

 {  83,1574 }, {  84,1574 }, {  85,1574 }, {  86,1574 }, {  87,1574 },
 {  88,1574 }, {  89,1574 }, {  90,1574 }, {  91,1574 }, {  92,1574 },
 {  93,1574 }, {  94,1574 }, {  95,1574 }, {  96,1574 }, {  97,1574 },
 {  98,1574 }, {  99,1574 }, { 100,1574 }, { 101,1574 }, { 102,1574 },
 { 103,1574 }, { 104,1574 }, { 105,1574 }, { 106,1574 }, { 107,1574 },
 { 108,1574 }, { 109,1574 }, { 110,1574 }, { 111,1574 }, { 112,1574 },
 { 113,1574 }, { 114,1574 }, { 115,1574 }, { 116,1574 }, { 117,1574 },
 { 118,1574 }, { 119,1574 }, { 120,1574 }, { 121,1574 }, { 122,1574 },
 { 123,1574 }, { 124,1574 }, { 125,1574 }, { 126,1574 }, { 127,1574 },
 { 128,1574 }, { 129,1574 }, { 130,1574 }, { 131,1574 }, { 132,1574 },

 { 133,1574 }, { 134,1574 }, { 135,1574 }, { 136,1574 }, { 137,1574 },
 { 138,1574 }, { 139,1574 }, { 140,1574 }, { 141,1574 }, { 142,1574 },
 { 143,1574 }, { 144,1574 }, { 145,1574 }, { 146,1574 }, { 147,1574 },
 { 148,1574 }, { 149,1574 }, { 150,1574 }, { 151,1574 }, { 152,1574 },
 { 153,1574 }, { 154,1574 }, { 155,1574 }, { 156,1574 }, { 157,1574 },
 { 158,1574 }, { 159,1574 }, { 160,1574 }, { 161,1574 }, { 162,1574 },
 { 163,1574 }, { 164,1574 }, { 165,1574 }, { 166,1574 }, { 167,1574 },
 { 168,1574 }, { 169,1574 }, { 170,1574 }, { 171,1574 }, { 172,1574 },
 { 173,1574 }, { 174,1574 }, { 175,1574 }, { 176,1574 }, { 177,1574 },
 { 178,1574 }, { 179,1574 }, { 180,1574 }, { 181,1574 }, { 182,1574 },

 { 183,1574 }, { 184,1574 }, { 185,1574 }, { 186,1574 }, { 187,1574 },
 { 188,1574 }, { 189,1574 }, { 190,1574 }, { 191,1574 }, { 192,1574 },
 { 193,1574 }, { 194,1574 }, { 195,1574 }, { 196,1574 }, { 197,1574 },
 { 198,1574 }, { 199,1574 }, { 200,1574 }, { 201,1574 }, { 202,1574 },
 { 203,1574 }, { 204,1574 }, { 205,1574 }, { 206,1574 }, { 207,1574 },
 { 208,1574 }, { 209,1574 }, { 210,1574 }, { 211,1574 }, { 212,1574 },
 { 213,1574 }, { 214,1574 }, { 215,1574 }, { 216,1574 }, { 217,1574 },
 { 218,1574 }, { 219,1574 }, { 220,1574 }, { 221,1574 }, { 222,1574 },
 { 223,1574 }, { 224,1574 }, { 225,1574 }, { 226,1574 }, { 227,1574 },
 { 228,1574 }, { 229,1574 }, { 230,1574 }, { 231,1574 }, { 232,1574 },

 { 233,1574 }, { 234,1574 }, { 235,1574 }, { 236,1574 }, { 237,1574 },
 { 238,1574 }, { 239,1574 }, { 240,1574 }, { 241,1574 }, { 242,1574 },
 { 243,1574 }, { 244,1574 }, { 245,1574 }, { 246,1574 }, { 247,1574 },
 { 248,1574 }, { 249,1574 }, { 250,1574 }, { 251,1574 }, { 252,1574 },
 { 253,1574 }, { 254,1574 }, { 255,1574 }, { 256,1574 }, {   0,   0 },
 {   0,4598 }, {   1,1316 }, {   2,1316 }, {   3,1316 }, {   4,1316 },
 {   5,1316 }, {   6,1316 }, {   7,1316 }, {   8,1316 }, {   9,1316 },
 {  10,1318 }, {  11,1316 }, {  12,1316 }, {  13,1316 }, {  14,1316 },
 {  15,1316 }, {  16,1316 }, {  17,1316 }, {  18,1316 }, {  19,1316 },
 {  20,1316 }, {  21,1316 }, {  22,1316 }, {  23,1316 }, {  24,1316 },

 {  25,1316 }, {  26,1316 }, {  27,1316 }, {  28,1316 }, {  29,1316 },
 {  30,1316 }, {  31,1316 }, {  32,1316 }, {  33,1316 }, {  34,1316 },
 {  35,1316 }, {  36,1316 }, {  37,1316 }, {  38,1316 }, {  39,1316 },
 {  40,1316 }, {  41,1316 }, {  42,1316 }, {  43,1316 }, {  44,1316 },
 {  45,1316 }, {  46,1316 }, {  47,1316 }, {  48,1316 }, {  49,1316 },
 {  50,1316 }, {  51,1316 }, {  52,1316 }, {  53,1316 }, {  54,1316 },
 {  55,1316 }, {  56,1316 }, {  57,1316 }, {  58,1316 }, {  59,1316 },
 {  60,1316 }, {  61,1316 }, {  62,1316 }, {  63,1316 }, {  64,1316 },
 {  65,1316 }, {  66,1316 }, {  67,1316 }, {  68,1316 }, {  69,1316 },
 {  70,1316 }, {  71,1316 }, {  72,1316 }, {  73,1316 }, {  74,1316 },

 {  75,1316 }, {  76,1316 }, {  77,1316 }, {  78,1316 }, {  79,1316 },
 {  80,1316 }, {  81,1316 }, {  82,1316 }, {  83,1316 }, {  84,1316 },
 {  85,1316 }, {  86,1316 }, {  87,1316 }, {  88,1316 }, {  89,1316 },
 {  90,1316 }, {  91,1316 }, {  92,1316 }, {  93,1316 }, {  94,1316 },
 {  95,1316 }, {  96,1316 }, {  97,1316 }, {  98,1316 }, {  99,1316 },
 { 100,1316 }, { 101,1316 }, { 102,1316 }, { 103,1316 }, { 104,1316 },
 { 105,1316 }, { 106,1316 }, { 107,1316 }, { 108,1316 }, { 109,1316 },
 { 110,1316 }, { 111,1316 }, { 112,1316 }, { 113,1316 }, { 114,1316 },
 { 115,1316 }, { 116,1316 }, { 117,1316 }, { 118,1316 }, { 119,1316 },
 { 120,1316 }, { 121,1316 }, { 122,1316 }, { 123,1316 }, { 124,1316 },

 { 125,1316 }, { 126,1316 }, { 127,1316 }, { 128,1316 }, { 129,1316 },
 { 130,1316 }, { 131,1316 }, { 132,1316 }, { 133,1316 }, { 134,1316 },
 { 135,1316 }, { 136,1316 }, { 137,1316 }, { 138,1316 }, { 139,1316 },
 { 140,1316 }, { 141,1316 }, { 142,1316 }, { 143,1316 }, { 144,1316 },
 { 145,1316 }, { 146,1316 }, { 147,1316 }, { 148,1316 }, { 149,1316 },
 { 150,1316 }, { 151,1316 }, { 152,1316 }, { 153,1316 }, { 154,1316 },
 { 155,1316 }, { 156,1316 }, { 157,1316 }, { 158,1316 }, { 159,1316 },
 { 160,1316 }, { 161,1316 }, { 162,1316 }, { 163,1316 }, { 164,1316 },
 { 165,1316 }, { 166,1316 }, { 167,1316 }, { 168,1316 }, { 169,1316 },
 { 170,1316 }, { 171,1316 }, { 172,1316 }, { 173,1316 }, { 174,1316 },

 { 175,1316 }, { 176,1316 }, { 177,1316 }, { 178,1316 }, { 179,1316 },
 { 180,1316 }, { 181,1316 }, { 182,1316 }, { 183,1316 }, { 184,1316 },
 { 185,1316 }, { 186,1316 }, { 187,1316 }, { 188,1316 }, { 189,1316 },
 { 190,1316 }, { 191,1316 }, { 192,1316 }, { 193,1316 }, { 194,1316 },
 { 195,1316 }, { 196,1316 }, { 197,1316 }, { 198,1316 }, { 199,1316 },
 { 200,1316 }, { 201,1316 }, { 202,1316 }, { 203,1316 }, { 204,1316 },
 { 205,1316 }, { 206,1316 }, { 207,1316 }, { 208,1316 }, { 209,1316 },
 { 210,1316 }, { 211,1316 }, { 212,1316 }, { 213,1316 }, { 214,1316 },
 { 215,1316 }, { 216,1316 }, { 217,1316 }, { 218,1316 }, { 219,1316 },
 { 220,1316 }, { 221,1316 }, { 222,1316 }, { 223,1316 }, { 224,1316 },

 { 225,1316 }, { 226,1316 }, { 227,1316 }, { 228,1316 }, { 229,1316 },
 { 230,1316 }, { 231,1316 }, { 232,1316 }, { 233,1316 }, { 234,1316 },
 { 235,1316 }, { 236,1316 }, { 237,1316 }, { 238,1316 }, { 239,1316 },
 { 240,1316 }, { 241,1316 }, { 242,1316 }, { 243,1316 }, { 244,1316 },
 { 245,1316 }, { 246,1316 }, { 247,1316 }, { 248,1316 }, { 249,1316 },
 { 250,1316 }, { 251,1316 }, { 252,1316 }, { 253,1316 }, { 254,1316 },
 { 255,1316 }, { 256,1316 }, {   0,   0 }, {   0,4340 }, {   1,1032 },
 {   2,1032 }, {   3,1032 }, {   4,1032 }, {   5,1032 }, {   6,1032 },
 {   7,1032 }, {   8,1032 }, {   9,1032 }, {  10,1032 }, {  11,1032 },
 {  12,1032 }, {  13,1032 }, {  14,1032 }, {  15,1032 }, {  16,1032 },

 {  17,1032 }, {  18,1032 }, {  19,1032 }, {  20,1032 }, {  21,1032 },
 {  22,1032 }, {  23,1032 }, {  24,1032 }, {  25,1032 }, {  26,1032 },
 {  27,1032 }, {  28,1032 }, {  29,1032 }, {  30,1032 }, {  31,1032 },
 {  32,1032 }, {  33,1032 }, {  34,1032 }, {  35,1032 }, {  36,1032 },
 {  37,1032 }, {  38,1032 }, {  39,1032 }, {  40,1032 }, {  41,1032 },
 {  42,1032 }, {  43,1032 }, {  44,1032 }, {  45,1032 }, {  46,1062 },
 {  47,1032 }, {  48,1936 }, {  49,1936 }, {  50,1936 }, {  51,1936 },
 {  52,1936 }, {  53,1936 }, {  54,1936 }, {  55,1936 }, {  56,1936 },
 {  57,1936 }, {  58,1032 }, {  59,1032 }, {  60,1032 }, {  61,1032 },
 {  62,1032 }, {  63,1032 }, {  64,1064 }, {  65,1936 }, {  66,1936 },

 {  67,1936 }, {  68,1936 }, {  69,1936 }, {  70,1936 }, {  71,1936 },
 {  72,1936 }, {  73,1936 }, {  74,1936 }, {  75,1936 }, {  76,1936 },
 {  77,1936 }, {  78,1936 }, {  79,1936 }, {  80,1936 }, {  81,1936 },
 {  82,1936 }, {  83,1936 }, {  84,1936 }, {  85,1936 }, {  86,1936 },
 {  87,1936 }, {  88,1936 }, {  89,1936 }, {  90,1936 }, {  91,1032 },
 {  92,1032 }, {  93,1066 }, {  94,1032 }, {  95,1936 }, {  96,1032 },
 {  97,1936 }, {  98,1936 }, {  99,1936 }, { 100,1936 }, { 101,1936 },
 { 102,1936 }, { 103,1936 }, { 104,1936 }, { 105,1936 }, { 106,1936 },
 { 107,1936 }, { 108,1936 }, { 109,1936 }, { 110,1936 }, { 111,1936 },
 { 112,1936 }, { 113,1936 }, { 114,1936 }, { 115,1936 }, { 116,1936 },

 { 117,1936 }, { 118,1936 }, { 119,1936 }, { 120,1936 }, { 121,1936 },
 { 122,1936 }, { 123,1032 }, { 124,1032 }, { 125,1032 }, { 126,1032 },
 { 127,1032 }, { 128,1032 }, { 129,1032 }, { 130,1032 }, { 131,1032 },
 { 132,1032 }, { 133,1032 }, { 134,1032 }, { 135,1032 }, { 136,1032 },
 { 137,1032 }, { 138,1032 }, { 139,1032 }, { 140,1032 }, { 141,1032 },
 { 142,1032 }, { 143,1032 }, { 144,1032 }, { 145,1032 }, { 146,1032 },
 { 147,1032 }, { 148,1032 }, { 149,1032 }, { 150,1032 }, { 151,1032 },
 { 152,1032 }, { 153,1032 }, { 154,1032 }, { 155,1032 }, { 156,1032 },
 { 157,1032 }, { 158,1032 }, { 159,1032 }, { 160,1032 }, { 161,1032 },
 { 162,1032 }, { 163,1032 }, { 164,1032 }, { 165,1032 }, { 166,1032 },

 { 167,1032 }, { 168,1032 }, { 169,1032 }, { 170,1032 }, { 171,1032 },
 { 172,1032 }, { 173,1032 }, { 174,1032 }, { 175,1032 }, { 176,1032 },
 { 177,1032 }, { 178,1032 }, { 179,1032 }, { 180,1032 }, { 181,1032 },
 { 182,1032 }, { 183,1032 }, { 184,1032 }, { 185,1032 }, { 186,1032 },
 { 187,1032 }, { 188,1032 }, { 189,1032 }, { 190,1032 }, { 191,1032 },
 { 192,1032 }, { 193,1032 }, { 194,1032 }, { 195,1032 }, { 196,1032 },
 { 197,1032 }, { 198,1032 }, { 199,1032 }, { 200,1032 }, { 201,1032 },
 { 202,1032 }, { 203,1032 }, { 204,1032 }, { 205,1032 }, { 206,1032 },
 { 207,1032 }, { 208,1032 }, { 209,1032 }, { 210,1032 }, { 211,1032 },
 { 212,1032 }, { 213,1032 }, { 214,1032 }, { 215,1032 }, { 216,1032 },

 { 217,1032 }, { 218,1032 }, { 219,1032 }, { 220,1032 }, { 221,1032 },
 { 222,1032 }, { 223,1032 }, { 224,1032 }, { 225,1032 }, { 226,1032 },
 { 227,1032 }, { 228,1032 }, { 229,1032 }, { 230,1032 }, { 231,1032 },
 { 232,1032 }, { 233,1032 }, { 234,1032 }, { 235,1032 }, { 236,1032 },
 { 237,1032 }, { 238,1032 }, { 239,1032 }, { 240,1032 }, { 241,1032 },
 { 242,1032 }, { 243,1032 }, { 244,1032 }, { 245,1032 }, { 246,1032 },
 { 247,1032 }, { 248,1032 }, { 249,1032 }, { 250,1032 }, { 251,1032 },
 { 252,1032 }, { 253,1032 }, { 254,1032 }, { 255,1032 }, { 256,1032 },
 {   0,   0 }, {   0,4082 }, {   1, 774 }, {   2, 774 }, {   3, 774 },
 {   4, 774 }, {   5, 774 }, {   6, 774 }, {   7, 774 }, {   8, 774 },

 {   9, 774 }, {  10, 774 }, {  11, 774 }, {  12, 774 }, {  13, 774 },
 {  14, 774 }, {  15, 774 }, {  16, 774 }, {  17, 774 }, {  18, 774 },
 {  19, 774 }, {  20, 774 }, {  21, 774 }, {  22, 774 }, {  23, 774 },
 {  24, 774 }, {  25, 774 }, {  26, 774 }, {  27, 774 }, {  28, 774 },
 {  29, 774 }, {  30, 774 }, {  31, 774 }, {  32, 774 }, {  33, 774 },
 {  34, 774 }, {  35, 774 }, {  36, 774 }, {  37, 774 }, {  38, 774 },
 {  39, 774 }, {  40, 774 }, {  41, 774 }, {  42, 774 }, {  43, 774 },
 {  44, 774 }, {  45, 774 }, {  46, 804 }, {  47, 774 }, {  48,1678 },
 {  49,1678 }, {  50,1678 }, {  51,1678 }, {  52,1678 }, {  53,1678 },
 {  54,1678 }, {  55,1678 }, {  56,1678 }, {  57,1678 }, {  58, 774 },

 {  59, 774 }, {  60, 774 }, {  61, 774 }, {  62, 774 }, {  63, 774 },
 {  64, 806 }, {  65,1678 }, {  66,1678 }, {  67,1678 }, {  68,1678 },
 {  69,1678 }, {  70,1678 }, {  71,1678 }, {  72,1678 }, {  73,1678 },
 {  74,1678 }, {  75,1678 }, {  76,1678 }, {  77,1678 }, {  78,1678 },
 {  79,1678 }, {  80,1678 }, {  81,1678 }, {  82,1678 }, {  83,1678 },
 {  84,1678 }, {  85,1678 }, {  86,1678 }, {  87,1678 }, {  88,1678 },
 {  89,1678 }, {  90,1678 }, {  91, 774 }, {  92, 774 }, {  93, 808 },
 {  94, 774 }, {  95,1678 }, {  96, 774 }, {  97,1678 }, {  98,1678 },
 {  99,1678 }, { 100,1678 }, { 101,1678 }, { 102,1678 }, { 103,1678 },
 { 104,1678 }, { 105,1678 }, { 106,1678 }, { 107,1678 }, { 108,1678 },

 { 109,1678 }, { 110,1678 }, { 111,1678 }, { 112,1678 }, { 113,1678 },
 { 114,1678 }, { 115,1678 }, { 116,1678 }, { 117,1678 }, { 118,1678 },
 { 119,1678 }, { 120,1678 }, { 121,1678 }, { 122,1678 }, { 123, 774 },
 { 124, 774 }, { 125, 774 }, { 126, 774 }, { 127, 774 }, { 128, 774 },
 { 129, 774 }, { 130, 774 }, { 131, 774 }, { 132, 774 }, { 133, 774 },
 { 134, 774 }, { 135, 774 }, { 136, 774 }, { 137, 774 }, { 138, 774 },
 { 139, 774 }, { 140, 774 }, { 141, 774 }, { 142, 774 }, { 143, 774 },
 { 144, 774 }, { 145, 774 }, { 146, 774 }, { 147, 774 }, { 148, 774 },
 { 149, 774 }, { 150, 774 }, { 151, 774 }, { 152, 774 }, { 153, 774 },
 { 154, 774 }, { 155, 774 }, { 156, 774 }, { 157, 774 }, { 158, 774 },

 { 159, 774 }, { 160, 774 }, { 161, 774 }, { 162, 774 }, { 163, 774 },
 { 164, 774 }, { 165, 774 }, { 166, 774 }, { 167, 774 }, { 168, 774 },
 { 169, 774 }, { 170, 774 }, { 171, 774 }, { 172, 774 }, { 173, 774 },
 { 174, 774 }, { 175, 774 }, { 176, 774 }, { 177, 774 }, { 178, 774 },
 { 179, 774 }, { 180, 774 }, { 181, 774 }, { 182, 774 }, { 183, 774 },
 { 184, 774 }, { 185, 774 }, { 186, 774 }, { 187, 774 }, { 188, 774 },
 { 189, 774 }, { 190, 774 }, { 191, 774 }, { 192, 774 }, { 193, 774 },
 { 194, 774 }, { 195, 774 }, { 196, 774 }, { 197, 774 }, { 198, 774 },
 { 199, 774 }, { 200, 774 }, { 201, 774 }, { 202, 774 }, { 203, 774 },
 { 204, 774 }, { 205, 774 }, { 206, 774 }, { 207, 774 }, { 208, 774 },

 { 209, 774 }, { 210, 774 }, { 211, 774 }, { 212, 774 }, { 213, 774 },
 { 214, 774 }, { 215, 774 }, { 216, 774 }, { 217, 774 }, { 218, 774 },
 { 219, 774 }, { 220, 774 }, { 221, 774 }, { 222, 774 }, { 223, 774 },
 { 224, 774 }, { 225, 774 }, { 226, 774 }, { 227, 774 }, { 228, 774 },
 { 229, 774 }, { 230, 774 }, { 231, 774 }, { 232, 774 }, { 233, 774 },
 { 234, 774 }, { 235, 774 }, { 236, 774 }, { 237, 774 }, { 238, 774 },
 { 239, 774 }, { 240, 774 }, { 241, 774 }, { 242, 774 }, { 243, 774 },
 { 244, 774 }, { 245, 774 }, { 246, 774 }, { 247, 774 }, { 248, 774 },
 { 249, 774 }, { 250, 774 }, { 251, 774 }, { 252, 774 }, { 253, 774 },
 { 254, 774 }, { 255, 774 }, { 256, 774 }, {   0,   0 }, {   0,3824 },

 {   1, 552 }, {   2, 552 }, {   3, 552 }, {   4, 552 }, {   5, 552 },
 {   6, 552 }, {   7, 552 }, {   8, 552 }, {   9, 552 }, {  10, 552 },
 {  11, 552 }, {  12, 552 }, {  13, 552 }, {  14, 552 }, {  15, 552 },
 {  16, 552 }, {  17, 552 }, {  18, 552 }, {  19, 552 }, {  20, 552 },
 {  21, 552 }, {  22, 552 }, {  23, 552 }, {  24, 552 }, {  25, 552 },
 {  26, 552 }, {  27, 552 }, {  28, 552 }, {  29, 552 }, {  30, 552 },
 {  31, 552 }, {  32, 552 }, {  33, 552 }, {  34, 552 }, {  35, 552 },
 {  36, 552 }, {  37, 552 }, {  38, 552 }, {  39, 552 }, {  40, 552 },
 {  41, 552 }, {  42, 552 }, {  43, 552 }, {  44, 552 }, {  45, 552 },
 {  46, 552 }, {  47, 552 }, {  48, 552 }, {  49, 552 }, {  50, 552 },

 {  51, 552 }, {  52, 552 }, {  53, 552 }, {  54, 552 }, {  55, 552 },
 {  56, 552 }, {  57, 552 }, {  58, 552 }, {  59, 552 }, {  60, 552 },
 {  61, 552 }, {  62, 552 }, {  63, 552 }, {  64, 552 }, {  65, 552 },
 {  66, 552 }, {  67, 552 }, {  68, 552 }, {  69, 552 }, {  70, 552 },
 {  71, 552 }, {  72, 552 }, {  73, 552 }, {  74, 552 }, {  75, 552 },
 {  76, 552 }, {  77, 552 }, {  78, 552 }, {  79, 552 }, {  80, 552 },
 {  81, 552 }, {  82, 552 }, {  83, 552 }, {  84, 552 }, {  85, 552 },
 {  86, 552 }, {  87, 552 }, {  88, 552 }, {  89, 552 }, {  90, 552 },
 {  91, 552 }, {  92, 552 }, {  93, 554 }, {  94, 552 }, {  95, 552 },
 {  96, 552 }, {  97, 552 }, {  98, 552 }, {  99, 552 }, { 100, 552 },

 { 101, 552 }, { 102, 552 }, { 103, 552 }, { 104, 552 }, { 105, 552 },
 { 106, 552 }, { 107, 552 }, { 108, 552 }, { 109, 552 }, { 110, 552 },
 { 111, 552 }, { 112, 552 }, { 113, 552 }, { 114, 552 }, { 115, 552 },
 { 116, 552 }, { 117, 552 }, { 118, 552 }, { 119, 552 }, { 120, 552 },
 { 121, 552 }, { 122, 552 }, { 123, 552 }, { 124, 552 }, { 125, 552 },
 { 126, 552 }, { 127, 552 }, { 128, 552 }, { 129, 552 }, { 130, 552 },
 { 131, 552 }, { 132, 552 }, { 133, 552 }, { 134, 552 }, { 135, 552 },
 { 136, 552 }, { 137, 552 }, { 138, 552 }, { 139, 552 }, { 140, 552 },
 { 141, 552 }, { 142, 552 }, { 143, 552 }, { 144, 552 }, { 145, 552 },
 { 146, 552 }, { 147, 552 }, { 148, 552 }, { 149, 552 }, { 150, 552 },

 { 151, 552 }, { 152, 552 }, { 153, 552 }, { 154, 552 }, { 155, 552 },
 { 156, 552 }, { 157, 552 }, { 158, 552 }, { 159, 552 }, { 160, 552 },
 { 161, 552 }, { 162, 552 }, { 163, 552 }, { 164, 552 }, { 165, 552 },
 { 166, 552 }, { 167, 552 }, { 168, 552 }, { 169, 552 }, { 170, 552 },
 { 171, 552 }, { 172, 552 }, { 173, 552 }, { 174, 552 }, { 175, 552 },
 { 176, 552 }, { 177, 552 }, { 178, 552 }, { 179, 552 }, { 180, 552 },
 { 181, 552 }, { 182, 552 }, { 183, 552 }, { 184, 552 }, { 185, 552 },
 { 186, 552 }, { 187, 552 }, { 188, 552 }, { 189, 552 }, { 190, 552 },
 { 191, 552 }, { 192, 552 }, { 193, 552 }, { 194, 552 }, { 195, 552 },
 { 196, 552 }, { 197, 552 }, { 198, 552 }, { 199, 552 }, { 200, 552 },

 { 201, 552 }, { 202, 552 }, { 203, 552 }, { 204, 552 }, { 205, 552 },
 { 206, 552 }, { 207, 552 }, { 208, 552 }, { 209, 552 }, { 210, 552 },
 { 211, 552 }, { 212, 552 }, { 213, 552 }, { 214, 552 }, { 215, 552 },
 { 216, 552 }, { 217, 552 }, { 218, 552 }, { 219, 552 }, { 220, 552 },
 { 221, 552 }, { 222, 552 }, { 223, 552 }, { 224, 552 }, { 225, 552 },
 { 226, 552 }, { 227, 552 }, { 228, 552 }, { 229, 552 }, { 230, 552 },
 { 231, 552 }, { 232, 552 }, { 233, 552 }, { 234, 552 }, { 235, 552 },
 { 236, 552 }, { 237, 552 }, { 238, 552 }, { 239, 552 }, { 240, 552 },
 { 241, 552 }, { 242, 552 }, { 243, 552 }, { 244, 552 }, { 245, 552 },
 { 246, 552 }, { 247, 552 }, { 248, 552 }, { 249, 552 }, { 250, 552 },

 { 251, 552 }, { 252, 552 }, { 253, 552 }, { 254, 552 }, { 255, 552 },
 { 256, 552 }, {   0,   0 }, {   0,3566 }, {   1, 294 }, {   2, 294 },
 {   3, 294 }, {   4, 294 }, {   5, 294 }, {   6, 294 }, {   7, 294 },
 {   8, 294 }, {   9, 294 }, {  10, 294 }, {  11, 294 }, {  12, 294 },
 {  13, 294 }, {  14, 294 }, {  15, 294 }, {  16, 294 }, {  17, 294 },
 {  18, 294 }, {  19, 294 }, {  20, 294 }, {  21, 294 }, {  22, 294 },
 {  23, 294 }, {  24, 294 }, {  25, 294 }, {  26, 294 }, {  27, 294 },
 {  28, 294 }, {  29, 294 }, {  30, 294 }, {  31, 294 }, {  32, 294 },
 {  33, 294 }, {  34, 294 }, {  35, 294 }, {  36, 294 }, {  37, 294 },
 {  38, 294 }, {  39, 294 }, {  40, 294 }, {  41, 294 }, {  42, 294 },

 {  43, 294 }, {  44, 294 }, {  45, 294 }, {  46, 294 }, {  47, 294 },
 {  48, 294 }, {  49, 294 }, {  50, 294 }, {  51, 294 }, {  52, 294 },
 {  53, 294 }, {  54, 294 }, {  55, 294 }, {  56, 294 }, {  57, 294 },
 {  58, 294 }, {  59, 294 }, {  60, 294 }, {  61, 294 }, {  62, 294 },
 {  63, 294 }, {  64, 294 }, {  65, 294 }, {  66, 294 }, {  67, 294 },
 {  68, 294 }, {  69, 294 }, {  70, 294 }, {  71, 294 }, {  72, 294 },
 {  73, 294 }, {  74, 294 }, {  75, 294 }, {  76, 294 }, {  77, 294 },
 {  78, 294 }, {  79, 294 }, {  80, 294 }, {  81, 294 }, {  82, 294 },
 {  83, 294 }, {  84, 294 }, {  85, 294 }, {  86, 294 }, {  87, 294 },
 {  88, 294 }, {  89, 294 }, {  90, 294 }, {  91, 294 }, {  92, 294 },

 {  93, 296 }, {  94, 294 }, {  95, 294 }, {  96, 294 }, {  97, 294 },
 {  98, 294 }, {  99, 294 }, { 100, 294 }, { 101, 294 }, { 102, 294 },
 { 103, 294 }, { 104, 294 }, { 105, 294 }, { 106, 294 }, { 107, 294 },
 { 108, 294 }, { 109, 294 }, { 110, 294 }, { 111, 294 }, { 112, 294 },
 { 113, 294 }, { 114, 294 }, { 115, 294 }, { 116, 294 }, { 117, 294 },
 { 118, 294 }, { 119, 294 }, { 120, 294 }, { 121, 294 }, { 122, 294 },
 { 123, 294 }, { 124, 294 }, { 125, 294 }, { 126, 294 }, { 127, 294 },
 { 128, 294 }, { 129, 294 }, { 130, 294 }, { 131, 294 }, { 132, 294 },
 { 133, 294 }, { 134, 294 }, { 135, 294 }, { 136, 294 }, { 137, 294 },
 { 138, 294 }, { 139, 294 }, { 140, 294 }, { 141, 294 }, { 142, 294 },

 { 143, 294 }, { 144, 294 }, { 145, 294 }, { 146, 294 }, { 147, 294 },
 { 148, 294 }, { 149, 294 }, { 150, 294 }, { 151, 294 }, { 152, 294 },
 { 153, 294 }, { 154, 294 }, { 155, 294 }, { 156, 294 }, { 157, 294 },
 { 158, 294 }, { 159, 294 }, { 160, 294 }, { 161, 294 }, { 162, 294 },
 { 163, 294 }, { 164, 294 }, { 165, 294 }, { 166, 294 }, { 167, 294 },
 { 168, 294 }, { 169, 294 }, { 170, 294 }, { 171, 294 }, { 172, 294 },
 { 173, 294 }, { 174, 294 }, { 175, 294 }, { 176, 294 }, { 177, 294 },
 { 178, 294 }, { 179, 294 }, { 180, 294 }, { 181, 294 }, { 182, 294 },
 { 183, 294 }, { 184, 294 }, { 185, 294 }, { 186, 294 }, { 187, 294 },
 { 188, 294 }, { 189, 294 }, { 190, 294 }, { 191, 294 }, { 192, 294 },

 { 193, 294 }, { 194, 294 }, { 195, 294 }, { 196, 294 }, { 197, 294 },
 { 198, 294 }, { 199, 294 }, { 200, 294 }, { 201, 294 }, { 202, 294 },
 { 203, 294 }, { 204, 294 }, { 205, 294 }, { 206, 294 }, { 207, 294 },
 { 208, 294 }, { 209, 294 }, { 210, 294 }, { 211, 294 }, { 212, 294 },
 { 213, 294 }, { 214, 294 }, { 215, 294 }, { 216, 294 }, { 217, 294 },
 { 218, 294 }, { 219, 294 }, { 220, 294 }, { 221, 294 }, { 222, 294 },
 { 223, 294 }, { 224, 294 }, { 225, 294 }, { 226, 294 }, { 227, 294 },
 { 228, 294 }, { 229, 294 }, { 230, 294 }, { 231, 294 }, { 232, 294 },
 { 233, 294 }, { 234, 294 }, { 235, 294 }, { 236, 294 }, { 237, 294 },
 { 238, 294 }, { 239, 294 }, { 240, 294 }, { 241, 294 }, { 242, 294 },

 { 243, 294 }, { 244, 294 }, { 245, 294 }, { 246, 294 }, { 247, 294 },
 { 248, 294 }, { 249, 294 }, { 250, 294 }, { 251, 294 }, { 252, 294 },
 { 253, 294 }, { 254, 294 }, { 255, 294 }, { 256, 294 }, {   0,  21 },
 {   0,3308 }, {   0,  20 }, {   0,3306 }, {   0,   3 }, {   0,3304 },
 {   0,   4 }, {   0,3302 }, {   0,   2 }, {   0,3300 }, {   0,   1 },
 {   0,3298 }, {   0,  18 }, {   0,3296 }, {   0,  16 }, {   0,3294 },
 {   0,  15 }, {   0,3292 }, {   0,  17 }, {   0,3290 }, {   0,   5 },
 {   0,3288 }, {   0,   7 }, {   0,3286 }, {   0,   6 }, {   0,3284 },
 {   0,  13 }, {   0,3282 }, {   0,  12 }, {   0,3280 }, {   0,   9 },
 {   0,3278 }, {   0,  10 }, {   0,3276 }, {   0,   8 }, {   0,3274 },

 {   0,  22 }, {   0,3272 }, {   0,   8 }, {   0,3270 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  48, 990 },
 {  49, 990 }, {  50, 990 }, {  51, 990 }, {  52, 990 }, {  53, 990 },
 {  54, 990 }, {  55, 990 }, {  56, 990 }, {  57, 990 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  65, 990 }, {  66, 990 }, {  67, 990 }, {  68, 990 },
 {  69, 990 }, {  70, 990 }, {  71, 990 }, {  72, 990 }, {  73, 990 },
 {  74, 990 }, {  75, 990 }, {  76, 990 }, {  77, 990 }, {  78, 990 },

 {  79, 990 }, {  80, 990 }, {  81, 990 }, {  82, 990 }, {  83, 990 },
 {  84, 990 }, {  85, 990 }, {  86, 990 }, {  87, 990 }, {  88, 990 },
 {  89, 990 }, {  90, 990 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  95, 990 }, {   0,   0 }, {  97, 990 }, {  98, 990 },
 {  99, 990 }, { 100, 990 }, { 101, 990 }, { 102, 990 }, { 103, 990 },
 { 104, 990 }, { 105, 990 }, { 106, 990 }, { 107, 990 }, { 108, 990 },
 { 109, 990 }, { 110, 990 }, { 111, 990 }, { 112, 990 }, { 113, 990 },
 { 114, 990 }, { 115, 990 }, { 116, 990 }, { 117, 990 }, { 118, 990 },
 { 119, 990 }, { 120, 990 }, { 121, 990 }, { 122, 990 }, {   0,  14 },
 {   0,3178 }, {   1, 990 }, {   2, 990 }, {   3, 990 }, {   4, 990 },

 {   5, 990 }, {   6, 990 }, {   7, 990 }, {   8, 990 }, {   9, 990 },
 {   0,   0 }, {  11, 990 }, {  12, 990 }, {  13, 990 }, {  14, 990 },
 {  15, 990 }, {  16, 990 }, {  17, 990 }, {  18, 990 }, {  19, 990 },
 {  20, 990 }, {  21, 990 }, {  22, 990 }, {  23, 990 }, {  24, 990 },
 {  25, 990 }, {  26, 990 }, {  27, 990 }, {  28, 990 }, {  29, 990 },
 {  30, 990 }, {  31, 990 }, {  32, 990 }, {  33, 990 }, {  34, 990 },
 {   0,   0 }, {  36, 990 }, {  37, 990 }, {  38, 990 }, {  39, 990 },
 {  40, 990 }, {  41, 990 }, {  42, 990 }, {  43, 990 }, {  44, 990 },
 {  45, 990 }, {  46, 990 }, {  47, 990 }, {  48, 990 }, {  49, 990 },
 {  50, 990 }, {  51, 990 }, {  52, 990 }, {  53, 990 }, {  54, 990 },

 {  55, 990 }, {  56, 990 }, {  57, 990 }, {  58, 990 }, {  59, 990 },
 {  60, 990 }, {  61, 990 }, {  62, 990 }, {  63, 990 }, {  64, 990 },
 {  65, 990 }, {  66, 990 }, {  67, 990 }, {  68, 990 }, {  69, 990 },
 {  70, 990 }, {  71, 990 }, {  72, 990 }, {  73, 990 }, {  74, 990 },
 {  75, 990 }, {  76, 990 }, {  77, 990 }, {  78, 990 }, {  79, 990 },
 {  80, 990 }, {  81, 990 }, {  82, 990 }, {  83, 990 }, {  84, 990 },
 {  85, 990 }, {  86, 990 }, {  87, 990 }, {  88, 990 }, {  89, 990 },
 {  90, 990 }, {  91, 990 }, {  92, 990 }, {  93, 990 }, {  94, 990 },
 {  95, 990 }, {  96, 990 }, {  97, 990 }, {  98, 990 }, {  99, 990 },
 { 100, 990 }, { 101, 990 }, { 102, 990 }, { 103, 990 }, { 104, 990 },

 { 105, 990 }, { 106, 990 }, { 107, 990 }, { 108, 990 }, { 109, 990 },
 { 110, 990 }, { 111, 990 }, { 112, 990 }, { 113, 990 }, { 114, 990 },
 { 115, 990 }, { 116, 990 }, { 117, 990 }, { 118, 990 }, { 119, 990 },
 { 120, 990 }, { 121, 990 }, { 122, 990 }, { 123, 990 }, { 124, 990 },
 { 125, 990 }, { 126, 990 }, { 127, 990 }, { 128, 990 }, { 129, 990 },
 { 130, 990 }, { 131, 990 }, { 132, 990 }, { 133, 990 }, { 134, 990 },
 { 135, 990 }, { 136, 990 }, { 137, 990 }, { 138, 990 }, { 139, 990 },
 { 140, 990 }, { 141, 990 }, { 142, 990 }, { 143, 990 }, { 144, 990 },
 { 145, 990 }, { 146, 990 }, { 147, 990 }, { 148, 990 }, { 149, 990 },
 { 150, 990 }, { 151, 990 }, { 152, 990 }, { 153, 990 }, { 154, 990 },

 { 155, 990 }, { 156, 990 }, { 157, 990 }, { 158, 990 }, { 159, 990 },
 { 160, 990 }, { 161, 990 }, { 162, 990 }, { 163, 990 }, { 164, 990 },
 { 165, 990 }, { 166, 990 }, { 167, 990 }, { 168, 990 }, { 169, 990 },
 { 170, 990 }, { 171, 990 }, { 172, 990 }, { 173, 990 }, { 174, 990 },
 { 175, 990 }, { 176, 990 }, { 177, 990 }, { 178, 990 }, { 179, 990 },
 { 180, 990 }, { 181, 990 }, { 182, 990 }, { 183, 990 }, { 184, 990 },
 { 185, 990 }, { 186, 990 }, { 187, 990 }, { 188, 990 }, { 189, 990 },
 { 190, 990 }, { 191, 990 }, { 192, 990 }, { 193, 990 }, { 194, 990 },
 { 195, 990 }, { 196, 990 }, { 197, 990 }, { 198, 990 }, { 199, 990 },
 { 200, 990 }, { 201, 990 }, { 202, 990 }, { 203, 990 }, { 204, 990 },

 { 205, 990 }, { 206, 990 }, { 207, 990 }, { 208, 990 }, { 209, 990 },
 { 210, 990 }, { 211, 990 }, { 212, 990 }, { 213, 990 }, { 214, 990 },
 { 215, 990 }, { 216, 990 }, { 217, 990 }, { 218, 990 }, { 219, 990 },
 { 220, 990 }, { 221, 990 }, { 222, 990 }, { 223, 990 }, { 224, 990 },
 { 225, 990 }, { 226, 990 }, { 227, 990 }, { 228, 990 }, { 229, 990 },
 { 230, 990 }, { 231, 990 }, { 232, 990 }, { 233, 990 }, { 234, 990 },
 { 235, 990 }, { 236, 990 }, { 237, 990 }, { 238, 990 }, { 239, 990 },
 { 240, 990 }, { 241, 990 }, { 242, 990 }, { 243, 990 }, { 244, 990 },
 { 245, 990 }, { 246, 990 }, { 247, 990 }, { 248, 990 }, { 249, 990 },
 { 250, 990 }, { 251, 990 }, { 252, 990 }, { 253, 990 }, { 254, 990 },

 { 255, 990 }, { 256, 990 }, {   0,  19 }, {   0,2920 }, {   1, 990 },
 {   2, 990 }, {   3, 990 }, {   4, 990 }, {   5, 990 }, {   6, 990 },
 {   7, 990 }, {   8, 990 }, {   9, 990 }, {   0,   0 }, {  11, 990 },
 {  12, 990 }, {  13, 990 }, {  14, 990 }, {  15, 990 }, {  16, 990 },
 {  17, 990 }, {  18, 990 }, {  19, 990 }, {  20, 990 }, {  21, 990 },
 {  22, 990 }, {  23, 990 }, {  24, 990 }, {  25, 990 }, {  26, 990 },
 {  27, 990 }, {  28, 990 }, {  29, 990 }, {  30, 990 }, {  31, 990 },
 {  32, 990 }, {  33, 990 }, {   0,   0 }, {  35, 990 }, {  36, 990 },
 {  37, 990 }, {  38, 990 }, {  39, 990 }, {  40, 990 }, {  41, 990 },
 {  42, 990 }, {  43, 990 }, {  44, 990 }, {  45, 990 }, {  46, 990 },

 {  47, 990 }, {  48, 990 }, {  49, 990 }, {  50, 990 }, {  51, 990 },
 {  52, 990 }, {  53, 990 }, {  54, 990 }, {  55, 990 }, {  56, 990 },
 {  57, 990 }, {  58, 990 }, {  59, 990 }, {  60, 990 }, {  61, 990 },
 {  62, 990 }, {  63, 990 }, {  64, 990 }, {  65, 990 }, {  66, 990 },
 {  67, 990 }, {  68, 990 }, {  69, 990 }, {  70, 990 }, {  71, 990 },
 {  72, 990 }, {  73, 990 }, {  74, 990 }, {  75, 990 }, {  76, 990 },
 {  77, 990 }, {  78, 990 }, {  79, 990 }, {  80, 990 }, {  81, 990 },
 {  82, 990 }, {  83, 990 }, {  84, 990 }, {  85, 990 }, {  86, 990 },
 {  87, 990 }, {  88, 990 }, {  89, 990 }, {  90, 990 }, {  91, 990 },
 {  92,1248 }, {  93, 990 }, {  94, 990 }, {  95, 990 }, {  96, 990 },

 {  97, 990 }, {  98, 990 }, {  99, 990 }, { 100, 990 }, { 101, 990 },
 { 102, 990 }, { 103, 990 }, { 104, 990 }, { 105, 990 }, { 106, 990 },
 { 107, 990 }, { 108, 990 }, { 109, 990 }, { 110, 990 }, { 111, 990 },
 { 112, 990 }, { 113, 990 }, { 114, 990 }, { 115, 990 }, { 116, 990 },
 { 117, 990 }, { 118, 990 }, { 119, 990 }, { 120, 990 }, { 121, 990 },
 { 122, 990 }, { 123, 990 }, { 124, 990 }, { 125, 990 }, { 126, 990 },
 { 127, 990 }, { 128, 990 }, { 129, 990 }, { 130, 990 }, { 131, 990 },
 { 132, 990 }, { 133, 990 }, { 134, 990 }, { 135, 990 }, { 136, 990 },
 { 137, 990 }, { 138, 990 }, { 139, 990 }, { 140, 990 }, { 141, 990 },
 { 142, 990 }, { 143, 990 }, { 144, 990 }, { 145, 990 }, { 146, 990 },

 { 147, 990 }, { 148, 990 }, { 149, 990 }, { 150, 990 }, { 151, 990 },
 { 152, 990 }, { 153, 990 }, { 154, 990 }, { 155, 990 }, { 156, 990 },
 { 157, 990 }, { 158, 990 }, { 159, 990 }, { 160, 990 }, { 161, 990 },
 { 162, 990 }, { 163, 990 }, { 164, 990 }, { 165, 990 }, { 166, 990 },
 { 167, 990 }, { 168, 990 }, { 169, 990 }, { 170, 990 }, { 171, 990 },
 { 172, 990 }, { 173, 990 }, { 174, 990 }, { 175, 990 }, { 176, 990 },
 { 177, 990 }, { 178, 990 }, { 179, 990 }, { 180, 990 }, { 181, 990 },
 { 182, 990 }, { 183, 990 }, { 184, 990 }, { 185, 990 }, { 186, 990 },
 { 187, 990 }, { 188, 990 }, { 189, 990 }, { 190, 990 }, { 191, 990 },
 { 192, 990 }, { 193, 990 }, { 194, 990 }, { 195, 990 }, { 196, 990 },

 { 197, 990 }, { 198, 990 }, { 199, 990 }, { 200, 990 }, { 201, 990 },
 { 202, 990 }, { 203, 990 }, { 204, 990 }, { 205, 990 }, { 206, 990 },
 { 207, 990 }, { 208, 990 }, { 209, 990 }, { 210, 990 }, { 211, 990 },
 { 212, 990 }, { 213, 990 }, { 214, 990 }, { 215, 990 }, { 216, 990 },
 { 217, 990 }, { 218, 990 }, { 219, 990 }, { 220, 990 }, { 221, 990 },
 { 222, 990 }, { 223, 990 }, { 224, 990 }, { 225, 990 }, { 226, 990 },
 { 227, 990 }, { 228, 990 }, { 229, 990 }, { 230, 990 }, { 231, 990 },
 { 232, 990 }, { 233, 990 }, { 234, 990 }, { 235, 990 }, { 236, 990 },
 { 237, 990 }, { 238, 990 }, { 239, 990 }, { 240, 990 }, { 241, 990 },
 { 242, 990 }, { 243, 990 }, { 244, 990 }, { 245, 990 }, { 246, 990 },

 { 247, 990 }, { 248, 990 }, { 249, 990 }, { 250, 990 }, { 251, 990 },
 { 252, 990 }, { 253, 990 }, { 254, 990 }, { 255, 990 }, { 256, 990 },
 {   0,  21 }, {   0,2662 }, {   1, 732 }, {   2, 732 }, {   3, 732 },
 {   4, 732 }, {   5, 732 }, {   6, 732 }, {   7, 732 }, {   8, 732 },
 {   9, 732 }, {  10, 732 }, {  11, 732 }, {  12, 732 }, {  13, 732 },
 {  14, 732 }, {  15, 732 }, {  16, 732 }, {  17, 732 }, {  18, 732 },
 {  19, 732 }, {  20, 732 }, {  21, 732 }, {  22, 732 }, {  23, 732 },
 {  24, 732 }, {  25, 732 }, {  26, 732 }, {  27, 732 }, {  28, 732 },
 {  29, 732 }, {  30, 732 }, {  31, 732 }, {  32, 732 }, {  33, 732 },
 {  34, 732 }, {  35, 732 }, {  36, 732 }, {  37, 732 }, {  38, 732 },

 {  39, 732 }, {  40, 732 }, {  41, 732 }, {  42, 732 }, {  43, 732 },
 {  44, 732 }, {  45, 732 }, {  46, 732 }, {  47, 732 }, {  48,1248 },
 {  49,1248 }, {  50,1248 }, {  51,1248 }, {  52, 732 }, {  53, 732 },
 {  54, 732 }, {  55, 732 }, {  56, 732 }, {  57, 732 }, {  58, 732 },
 {  59, 732 }, {  60, 732 }, {  61, 732 }, {  62, 732 }, {  63, 732 },
 {  64, 732 }, {  65, 732 }, {  66, 732 }, {  67, 732 }, {  68, 732 },
 {  69, 732 }, {  70, 732 }, {  71, 732 }, {  72, 732 }, {  73, 732 },
 {  74, 732 }, {  75, 732 }, {  76, 732 }, {  77, 732 }, {  78, 732 },
 {  79, 732 }, {  80, 732 }, {  81, 732 }, {  82, 732 }, {  83, 732 },
 {  84, 732 }, {  85, 732 }, {  86, 732 }, {  87, 732 }, {  88, 732 },

 {  89, 732 }, {  90, 732 }, {  91, 732 }, {  92, 732 }, {  93, 732 },
 {  94, 732 }, {  95, 732 }, {  96, 732 }, {  97, 732 }, {  98, 732 },
 {  99, 732 }, { 100, 732 }, { 101, 732 }, { 102, 732 }, { 103, 732 },
 { 104, 732 }, { 105, 732 }, { 106, 732 }, { 107, 732 }, { 108, 732 },
 { 109, 732 }, { 110, 732 }, { 111, 732 }, { 112, 732 }, { 113, 732 },
 { 114, 732 }, { 115, 732 }, { 116, 732 }, { 117, 732 }, { 118, 732 },
 { 119, 732 }, { 120,1506 }, { 121, 732 }, { 122, 732 }, { 123, 732 },
 { 124, 732 }, { 125, 732 }, { 126, 732 }, { 127, 732 }, { 128, 732 },
 { 129, 732 }, { 130, 732 }, { 131, 732 }, { 132, 732 }, { 133, 732 },
 { 134, 732 }, { 135, 732 }, { 136, 732 }, { 137, 732 }, { 138, 732 },

 { 139, 732 }, { 140, 732 }, { 141, 732 }, { 142, 732 }, { 143, 732 },
 { 144, 732 }, { 145, 732 }, { 146, 732 }, { 147, 732 }, { 148, 732 },
 { 149, 732 }, { 150, 732 }, { 151, 732 }, { 152, 732 }, { 153, 732 },
 { 154, 732 }, { 155, 732 }, { 156, 732 }, { 157, 732 }, { 158, 732 },
 { 159, 732 }, { 160, 732 }, { 161, 732 }, { 162, 732 }, { 163, 732 },
 { 164, 732 }, { 165, 732 }, { 166, 732 }, { 167, 732 }, { 168, 732 },
 { 169, 732 }, { 170, 732 }, { 171, 732 }, { 172, 732 }, { 173, 732 },
 { 174, 732 }, { 175, 732 }, { 176, 732 }, { 177, 732 }, { 178, 732 },
 { 179, 732 }, { 180, 732 }, { 181, 732 }, { 182, 732 }, { 183, 732 },
 { 184, 732 }, { 185, 732 }, { 186, 732 }, { 187, 732 }, { 188, 732 },

 { 189, 732 }, { 190, 732 }, { 191, 732 }, { 192, 732 }, { 193, 732 },
 { 194, 732 }, { 195, 732 }, { 196, 732 }, { 197, 732 }, { 198, 732 },
 { 199, 732 }, { 200, 732 }, { 201, 732 }, { 202, 732 }, { 203, 732 },
 { 204, 732 }, { 205, 732 }, { 206, 732 }, { 207, 732 }, { 208, 732 },
 { 209, 732 }, { 210, 732 }, { 211, 732 }, { 212, 732 }, { 213, 732 },
 { 214, 732 }, { 215, 732 }, { 216, 732 }, { 217, 732 }, { 218, 732 },
 { 219, 732 }, { 220, 732 }, { 221, 732 }, { 222, 732 }, { 223, 732 },
 { 224, 732 }, { 225, 732 }, { 226, 732 }, { 227, 732 }, { 228, 732 },
 { 229, 732 }, { 230, 732 }, { 231, 732 }, { 232, 732 }, { 233, 732 },
 { 234, 732 }, { 235, 732 }, { 236, 732 }, { 237, 732 }, { 238, 732 },

 { 239, 732 }, { 240, 732 }, { 241, 732 }, { 242, 732 }, { 243, 732 },
 { 244, 732 }, { 245, 732 }, { 246, 732 }, { 247, 732 }, { 248, 732 },
 { 249, 732 }, { 250, 732 }, { 251, 732 }, { 252, 732 }, { 253, 732 },
 { 254, 732 }, { 255, 732 }, { 256, 732 }, {   0,  11 }, {   0,2404 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  48,1506 }, {  49,1506 }, {  50,1506 },
 {  51,1506 }, {  52,1506 }, {  53,1506 }, {  54,1506 }, {  55,1506 },
 {  56,1506 }, {  57,1506 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  65,1506 },
 {  66,1506 }, {  67,1506 }, {  68,1506 }, {  69,1506 }, {  70,1506 },
 {  71,1506 }, {  72,1506 }, {  73,1506 }, {  74,1506 }, {  75,1506 },
 {  76,1506 }, {  77,1506 }, {  78,1506 }, {  79,1506 }, {  80,1506 },

 {  81,1506 }, {  82,1506 }, {  83,1506 }, {  84,1506 }, {  85,1506 },
 {  86,1506 }, {  87,1506 }, {  88,1506 }, {  89,1506 }, {  90,1506 },
 {   0,   4 }, {   0,2312 }, {   0,   0 }, {   0,   0 }, {  95,1506 },
 {   0,   0 }, {  97,1506 }, {  98,1506 }, {  99,1506 }, { 100,1506 },
 { 101,1506 }, { 102,1506 }, { 103,1506 }, { 104,1506 }, { 105,1506 },
 { 106,1506 }, { 107,1506 }, { 108,1506 }, { 109,1506 }, { 110,1506 },
 { 111,1506 }, { 112,1506 }, { 113,1506 }, { 114,1506 }, { 115,1506 },
 { 116,1506 }, { 117,1506 }, { 118,1506 }, { 119,1506 }, { 120,1506 },
 { 121,1506 }, { 122,1506 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  48,   0 },
 {  49,   0 }, {  50,   0 }, {  51,   0 }, {  52,   0 }, {  53,   0 },
 {  54,   0 }, {  55,   0 }, {  56,   0 }, {  57,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  65,   0 }, {  66,   0 }, {  67,   0 }, {  68,   0 },
 {  69,   0 }, {  70,   0 }, {  71,   0 }, {  72,   0 }, {  73,   0 },
 {  74,   0 }, {  75,   0 }, {  76,   0 }, {  77,   0 }, {  78,   0 },
 {  79,   0 }, {  80,   0 }, {  81,   0 }, {  82,   0 }, {  83,   0 },
 {  84,   0 }, {  85,   0 }, {  86,   0 }, {  87,   0 }, {  88,   0 },

 {  89,   0 }, {  90,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  95,   0 }, {   0,   0 }, {  97,   0 }, {  98,   0 },
 {  99,   0 }, { 100,   0 }, { 101,   0 }, { 102,   0 }, { 103,   0 },
 { 104,   0 }, { 105,   0 }, { 106,   0 }, { 107,   0 }, { 108,   0 },
 { 109,   0 }, { 110,   0 }, { 111,   0 }, { 112,   0 }, { 113,   0 },
 { 114,   0 }, { 115,   0 }, { 116,   0 }, { 117,   0 }, { 118,   0 },
 { 119,   0 }, { 120,   0 }, { 121,   0 }, { 122,   0 }, {   0,  14 },
 {   0,2188 }, {   1,   0 }, {   2,   0 }, {   3,   0 }, {   4,   0 },
 {   5,   0 }, {   6,   0 }, {   7,   0 }, {   8,   0 }, {   9,   0 },
 {   0,   0 }, {  11,   0 }, {  12,   0 }, {  13,   0 }, {  14,   0 },

 {  15,   0 }, {  16,   0 }, {  17,   0 }, {  18,   0 }, {  19,   0 },
 {  20,   0 }, {  21,   0 }, {  22,   0 }, {  23,   0 }, {  24,   0 },
 {  25,   0 }, {  26,   0 }, {  27,   0 }, {  28,   0 }, {  29,   0 },
 {  30,   0 }, {  31,   0 }, {  32,   0 }, {  33,   0 }, {  34,   0 },
 {   0,   0 }, {  36,   0 }, {  37,   0 }, {  38,   0 }, {  39,   0 },
 {  40,   0 }, {  41,   0 }, {  42,   0 }, {  43,   0 }, {  44,   0 },
 {  45,   0 }, {  46,   0 }, {  47,   0 }, {  48,   0 }, {  49,   0 },
 {  50,   0 }, {  51,   0 }, {  52,   0 }, {  53,   0 }, {  54,   0 },
 {  55,   0 }, {  56,   0 }, {  57,   0 }, {  58,   0 }, {  59,   0 },
 {  60,   0 }, {  61,   0 }, {  62,   0 }, {  63,   0 }, {  64,   0 },

 {  65,   0 }, {  66,   0 }, {  67,   0 }, {  68,   0 }, {  69,   0 },
 {  70,   0 }, {  71,   0 }, {  72,   0 }, {  73,   0 }, {  74,   0 },
 {  75,   0 }, {  76,   0 }, {  77,   0 }, {  78,   0 }, {  79,   0 },
 {  80,   0 }, {  81,   0 }, {  82,   0 }, {  83,   0 }, {  84,   0 },
 {  85,   0 }, {  86,   0 }, {  87,   0 }, {  88,   0 }, {  89,   0 },
 {  90,   0 }, {  91,   0 }, {  92,   0 }, {  93,   0 }, {  94,   0 },
 {  95,   0 }, {  96,   0 }, {  97,   0 }, {  98,   0 }, {  99,   0 },
 { 100,   0 }, { 101,   0 }, { 102,   0 }, { 103,   0 }, { 104,   0 },
 { 105,   0 }, { 106,   0 }, { 107,   0 }, { 108,   0 }, { 109,   0 },
 { 110,   0 }, { 111,   0 }, { 112,   0 }, { 113,   0 }, { 114,   0 },

 { 115,   0 }, { 116,   0 }, { 117,   0 }, { 118,   0 }, { 119,   0 },
 { 120,   0 }, { 121,   0 }, { 122,   0 }, { 123,   0 }, { 124,   0 },
 { 125,   0 }, { 126,   0 }, { 127,   0 }, { 128,   0 }, { 129,   0 },
 { 130,   0 }, { 131,   0 }, { 132,   0 }, { 133,   0 }, { 134,   0 },
 { 135,   0 }, { 136,   0 }, { 137,   0 }, { 138,   0 }, { 139,   0 },
 { 140,   0 }, { 141,   0 }, { 142,   0 }, { 143,   0 }, { 144,   0 },
 { 145,   0 }, { 146,   0 }, { 147,   0 }, { 148,   0 }, { 149,   0 },
 { 150,   0 }, { 151,   0 }, { 152,   0 }, { 153,   0 }, { 154,   0 },
 { 155,   0 }, { 156,   0 }, { 157,   0 }, { 158,   0 }, { 159,   0 },
 { 160,   0 }, { 161,   0 }, { 162,   0 }, { 163,   0 }, { 164,   0 },

 { 165,   0 }, { 166,   0 }, { 167,   0 }, { 168,   0 }, { 169,   0 },
 { 170,   0 }, { 171,   0 }, { 172,   0 }, { 173,   0 }, { 174,   0 },
 { 175,   0 }, { 176,   0 }, { 177,   0 }, { 178,   0 }, { 179,   0 },
 { 180,   0 }, { 181,   0 }, { 182,   0 }, { 183,   0 }, { 184,   0 },
 { 185,   0 }, { 186,   0 }, { 187,   0 }, { 188,   0 }, { 189,   0 },
 { 190,   0 }, { 191,   0 }, { 192,   0 }, { 193,   0 }, { 194,   0 },
 { 195,   0 }, { 196,   0 }, { 197,   0 }, { 198,   0 }, { 199,   0 },
 { 200,   0 }, { 201,   0 }, { 202,   0 }, { 203,   0 }, { 204,   0 },
 { 205,   0 }, { 206,   0 }, { 207,   0 }, { 208,   0 }, { 209,   0 },
 { 210,   0 }, { 211,   0 }, { 212,   0 }, { 213,   0 }, { 214,   0 },

 { 215,   0 }, { 216,   0 }, { 217,   0 }, { 218,   0 }, { 219,   0 },
 { 220,   0 }, { 221,   0 }, { 222,   0 }, { 223,   0 }, { 224,   0 },
 { 225,   0 }, { 226,   0 }, { 227,   0 }, { 228,   0 }, { 229,   0 },
 { 230,   0 }, { 231,   0 }, { 232,   0 }, { 233,   0 }, { 234,   0 },
 { 235,   0 }, { 236,   0 }, { 237,   0 }, { 238,   0 }, { 239,   0 },
 { 240,   0 }, { 241,   0 }, { 242,   0 }, { 243,   0 }, { 244,   0 },
 { 245,   0 }, { 246,   0 }, { 247,   0 }, { 248,   0 }, { 249,   0 },
 { 250,   0 }, { 251,   0 }, { 252,   0 }, { 253,   0 }, { 254,   0 },
 { 255,   0 }, { 256,   0 }, {   0,  19 }, {   0,1930 }, {   1,   0 },
 {   2,   0 }, {   3,   0 }, {   4,   0 }, {   5,   0 }, {   6,   0 },

 {   7,   0 }, {   8,   0 }, {   9,   0 }, {   0,   0 }, {  11,   0 },
 {  12,   0 }, {  13,   0 }, {  14,   0 }, {  15,   0 }, {  16,   0 },
 {  17,   0 }, {  18,   0 }, {  19,   0 }, {  20,   0 }, {  21,   0 },
 {  22,   0 }, {  23,   0 }, {  24,   0 }, {  25,   0 }, {  26,   0 },
 {  27,   0 }, {  28,   0 }, {  29,   0 }, {  30,   0 }, {  31,   0 },
 {  32,   0 }, {  33,   0 }, {   0,   0 }, {  35,   0 }, {  36,   0 },
 {  37,   0 }, {  38,   0 }, {  39,   0 }, {  40,   0 }, {  41,   0 },
 {  42,   0 }, {  43,   0 }, {  44,   0 }, {  45,   0 }, {  46,   0 },
 {  47,   0 }, {  48,   0 }, {  49,   0 }, {  50,   0 }, {  51,   0 },
 {  52,   0 }, {  53,   0 }, {  54,   0 }, {  55,   0 }, {  56,   0 },

 {  57,   0 }, {  58,   0 }, {  59,   0 }, {  60,   0 }, {  61,   0 },
 {  62,   0 }, {  63,   0 }, {  64,   0 }, {  65,   0 }, {  66,   0 },
 {  67,   0 }, {  68,   0 }, {  69,   0 }, {  70,   0 }, {  71,   0 },
 {  72,   0 }, {  73,   0 }, {  74,   0 }, {  75,   0 }, {  76,   0 },
 {  77,   0 }, {  78,   0 }, {  79,   0 }, {  80,   0 }, {  81,   0 },
 {  82,   0 }, {  83,   0 }, {  84,   0 }, {  85,   0 }, {  86,   0 },
 {  87,   0 }, {  88,   0 }, {  89,   0 }, {  90,   0 }, {  91,   0 },
 {  92, 258 }, {  93,   0 }, {  94,   0 }, {  95,   0 }, {  96,   0 },
 {  97,   0 }, {  98,   0 }, {  99,   0 }, { 100,   0 }, { 101,   0 },
 { 102,   0 }, { 103,   0 }, { 104,   0 }, { 105,   0 }, { 106,   0 },

 { 107,   0 }, { 108,   0 }, { 109,   0 }, { 110,   0 }, { 111,   0 },
 { 112,   0 }, { 113,   0 }, { 114,   0 }, { 115,   0 }, { 116,   0 },
 { 117,   0 }, { 118,   0 }, { 119,   0 }, { 120,   0 }, { 121,   0 },
 { 122,   0 }, { 123,   0 }, { 124,   0 }, { 125,   0 }, { 126,   0 },
 { 127,   0 }, { 128,   0 }, { 129,   0 }, { 130,   0 }, { 131,   0 },
 { 132,   0 }, { 133,   0 }, { 134,   0 }, { 135,   0 }, { 136,   0 },
 { 137,   0 }, { 138,   0 }, { 139,   0 }, { 140,   0 }, { 141,   0 },
 { 142,   0 }, { 143,   0 }, { 144,   0 }, { 145,   0 }, { 146,   0 },
 { 147,   0 }, { 148,   0 }, { 149,   0 }, { 150,   0 }, { 151,   0 },
 { 152,   0 }, { 153,   0 }, { 154,   0 }, { 155,   0 }, { 156,   0 },

 { 157,   0 }, { 158,   0 }, { 159,   0 }, { 160,   0 }, { 161,   0 },
 { 162,   0 }, { 163,   0 }, { 164,   0 }, { 165,   0 }, { 166,   0 },
 { 167,   0 }, { 168,   0 }, { 169,   0 }, { 170,   0 }, { 171,   0 },
 { 172,   0 }, { 173,   0 }, { 174,   0 }, { 175,   0 }, { 176,   0 },
 { 177,   0 }, { 178,   0 }, { 179,   0 }, { 180,   0 }, { 181,   0 },
 { 182,   0 }, { 183,   0 }, { 184,   0 }, { 185,   0 }, { 186,   0 },
 { 187,   0 }, { 188,   0 }, { 189,   0 }, { 190,   0 }, { 191,   0 },
 { 192,   0 }, { 193,   0 }, { 194,   0 }, { 195,   0 }, { 196,   0 },
 { 197,   0 }, { 198,   0 }, { 199,   0 }, { 200,   0 }, { 201,   0 },
 { 202,   0 }, { 203,   0 }, { 204,   0 }, { 205,   0 }, { 206,   0 },

 { 207,   0 }, { 208,   0 }, { 209,   0 }, { 210,   0 }, { 211,   0 },
 { 212,   0 }, { 213,   0 }, { 214,   0 }, { 215,   0 }, { 216,   0 },
 { 217,   0 }, { 218,   0 }, { 219,   0 }, { 220,   0 }, { 221,   0 },
 { 222,   0 }, { 223,   0 }, { 224,   0 }, { 225,   0 }, { 226,   0 },
 { 227,   0 }, { 228,   0 }, { 229,   0 }, { 230,   0 }, { 231,   0 },
 { 232,   0 }, { 233,   0 }, { 234,   0 }, { 235,   0 }, { 236,   0 },
 { 237,   0 }, { 238,   0 }, { 239,   0 }, { 240,   0 }, { 241,   0 },
 { 242,   0 }, { 243,   0 }, { 244,   0 }, { 245,   0 }, { 246,   0 },
 { 247,   0 }, { 248,   0 }, { 249,   0 }, { 250,   0 }, { 251,   0 },
 { 252,   0 }, { 253,   0 }, { 254,   0 }, { 255,   0 }, { 256,   0 },

 {   0,   0 }, {   0,1672 }, {   1,-258 }, {   2,-258 }, {   3,-258 },
 {   4,-258 }, {   5,-258 }, {   6,-258 }, {   7,-258 }, {   8,-258 },
 {   9,-258 }, {  10,-258 }, {  11,-258 }, {  12,-258 }, {  13,-258 },
 {  14,-258 }, {  15,-258 }, {  16,-258 }, {  17,-258 }, {  18,-258 },
 {  19,-258 }, {  20,-258 }, {  21,-258 }, {  22,-258 }, {  23,-258 },
 {  24,-258 }, {  25,-258 }, {  26,-258 }, {  27,-258 }, {  28,-258 },
 {  29,-258 }, {  30,-258 }, {  31,-258 }, {  32,-258 }, {  33,-258 },
 {  34,-258 }, {  35,-258 }, {  36,-258 }, {  37,-258 }, {  38,-258 },
 {  39,-258 }, {  40,-258 }, {  41,-258 }, {  42,-258 }, {  43,-258 },
 {  44,-258 }, {  45,-258 }, {  46,-258 }, {  47,-258 }, {  48, 258 },

 {  49, 258 }, {  50, 258 }, {  51, 258 }, {  52,-258 }, {  53,-258 },
 {  54,-258 }, {  55,-258 }, {  56,-258 }, {  57,-258 }, {  58,-258 },
 {  59,-258 }, {  60,-258 }, {  61,-258 }, {  62,-258 }, {  63,-258 },
 {  64,-258 }, {  65,-258 }, {  66,-258 }, {  67,-258 }, {  68,-258 },
 {  69,-258 }, {  70,-258 }, {  71,-258 }, {  72,-258 }, {  73,-258 },
 {  74,-258 }, {  75,-258 }, {  76,-258 }, {  77,-258 }, {  78,-258 },
 {  79,-258 }, {  80,-258 }, {  81,-258 }, {  82,-258 }, {  83,-258 },
 {  84,-258 }, {  85,-258 }, {  86,-258 }, {  87,-258 }, {  88,-258 },
 {  89,-258 }, {  90,-258 }, {  91,-258 }, {  92,-258 }, {  93,-258 },
 {  94,-258 }, {  95,-258 }, {  96,-258 }, {  97,-258 }, {  98,-258 },

 {  99,-258 }, { 100,-258 }, { 101,-258 }, { 102,-258 }, { 103,-258 },
 { 104,-258 }, { 105,-258 }, { 106,-258 }, { 107,-258 }, { 108,-258 },
 { 109,-258 }, { 110,-258 }, { 111,-258 }, { 112,-258 }, { 113,-258 },
 { 114,-258 }, { 115,-258 }, { 116,-258 }, { 117,-258 }, { 118,-258 },
 { 119,-258 }, { 120, 516 }, { 121,-258 }, { 122,-258 }, { 123,-258 },
 { 124,-258 }, { 125,-258 }, { 126,-258 }, { 127,-258 }, { 128,-258 },
 { 129,-258 }, { 130,-258 }, { 131,-258 }, { 132,-258 }, { 133,-258 },
 { 134,-258 }, { 135,-258 }, { 136,-258 }, { 137,-258 }, { 138,-258 },
 { 139,-258 }, { 140,-258 }, { 141,-258 }, { 142,-258 }, { 143,-258 },
 { 144,-258 }, { 145,-258 }, { 146,-258 }, { 147,-258 }, { 148,-258 },

 { 149,-258 }, { 150,-258 }, { 151,-258 }, { 152,-258 }, { 153,-258 },
 { 154,-258 }, { 155,-258 }, { 156,-258 }, { 157,-258 }, { 158,-258 },
 { 159,-258 }, { 160,-258 }, { 161,-258 }, { 162,-258 }, { 163,-258 },
 { 164,-258 }, { 165,-258 }, { 166,-258 }, { 167,-258 }, { 168,-258 },
 { 169,-258 }, { 170,-258 }, { 171,-258 }, { 172,-258 }, { 173,-258 },
 { 174,-258 }, { 175,-258 }, { 176,-258 }, { 177,-258 }, { 178,-258 },
 { 179,-258 }, { 180,-258 }, { 181,-258 }, { 182,-258 }, { 183,-258 },
 { 184,-258 }, { 185,-258 }, { 186,-258 }, { 187,-258 }, { 188,-258 },
 { 189,-258 }, { 190,-258 }, { 191,-258 }, { 192,-258 }, { 193,-258 },
 { 194,-258 }, { 195,-258 }, { 196,-258 }, { 197,-258 }, { 198,-258 },

 { 199,-258 }, { 200,-258 }, { 201,-258 }, { 202,-258 }, { 203,-258 },
 { 204,-258 }, { 205,-258 }, { 206,-258 }, { 207,-258 }, { 208,-258 },
 { 209,-258 }, { 210,-258 }, { 211,-258 }, { 212,-258 }, { 213,-258 },
 { 214,-258 }, { 215,-258 }, { 216,-258 }, { 217,-258 }, { 218,-258 },
 { 219,-258 }, { 220,-258 }, { 221,-258 }, { 222,-258 }, { 223,-258 },
 { 224,-258 }, { 225,-258 }, { 226,-258 }, { 227,-258 }, { 228,-258 },
 { 229,-258 }, { 230,-258 }, { 231,-258 }, { 232,-258 }, { 233,-258 },
 { 234,-258 }, { 235,-258 }, { 236,-258 }, { 237,-258 }, { 238,-258 },
 { 239,-258 }, { 240,-258 }, { 241,-258 }, { 242,-258 }, { 243,-258 },
 { 244,-258 }, { 245,-258 }, { 246,-258 }, { 247,-258 }, { 248,-258 },

 { 249,-258 }, { 250,-258 }, { 251,-258 }, { 252,-258 }, { 253,-258 },
 { 254,-258 }, { 255,-258 }, { 256,-258 }, {   0,  19 }, {   0,1414 },
 {   1,-516 }, {   2,-516 }, {   3,-516 }, {   4,-516 }, {   5,-516 },
 {   6,-516 }, {   7,-516 }, {   8,-516 }, {   9,-516 }, {   0,   0 },
 {  11,-516 }, {  12,-516 }, {  13,-516 }, {  14,-516 }, {  15,-516 },
 {  16,-516 }, {  17,-516 }, {  18,-516 }, {  19,-516 }, {  20,-516 },
 {  21,-516 }, {  22,-516 }, {  23,-516 }, {  24,-516 }, {  25,-516 },
 {  26,-516 }, {  27,-516 }, {  28,-516 }, {  29,-516 }, {  30,-516 },
 {  31,-516 }, {  32,-516 }, {  33,-516 }, {   0,   0 }, {  35,-516 },
 {  36,-516 }, {  37,-516 }, {  38,-516 }, {  39,-516 }, {  40,-516 },

 {  41,-516 }, {  42,-516 }, {  43,-516 }, {  44,-516 }, {  45,-516 },
 {  46,-516 }, {  47,-516 }, {  48, 640 }, {  49, 640 }, {  50, 640 },
 {  51, 640 }, {  52, 640 }, {  53, 640 }, {  54, 640 }, {  55, 640 },
 {  56,-516 }, {  57,-516 }, {  58,-516 }, {  59,-516 }, {  60,-516 },
 {  61,-516 }, {  62,-516 }, {  63,-516 }, {  64,-516 }, {  65,-516 },
 {  66,-516 }, {  67,-516 }, {  68,-516 }, {  69,-516 }, {  70,-516 },
 {  71,-516 }, {  72,-516 }, {  73,-516 }, {  74,-516 }, {  75,-516 },
 {  76,-516 }, {  77,-516 }, {  78,-516 }, {  79,-516 }, {  80,-516 },
 {  81,-516 }, {  82,-516 }, {  83,-516 }, {  84,-516 }, {  85,-516 },
 {  86,-516 }, {  87,-516 }, {  88,-516 }, {  89,-516 }, {  90,-516 },

 {  91,-516 }, {  92,-258 }, {  93,-516 }, {  94,-516 }, {  95,-516 },
 {  96,-516 }, {  97,-516 }, {  98,-516 }, {  99,-516 }, { 100,-516 },
 { 101,-516 }, { 102,-516 }, { 103,-516 }, { 104,-516 }, { 105,-516 },
 { 106,-516 }, { 107,-516 }, { 108,-516 }, { 109,-516 }, { 110,-516 },
 { 111,-516 }, { 112,-516 }, { 113,-516 }, { 114,-516 }, { 115,-516 },
 { 116,-516 }, { 117,-516 }, { 118,-516 }, { 119,-516 }, { 120,-516 },
 { 121,-516 }, { 122,-516 }, { 123,-516 }, { 124,-516 }, { 125,-516 },
 { 126,-516 }, { 127,-516 }, { 128,-516 }, { 129,-516 }, { 130,-516 },
 { 131,-516 }, { 132,-516 }, { 133,-516 }, { 134,-516 }, { 135,-516 },
 { 136,-516 }, { 137,-516 }, { 138,-516 }, { 139,-516 }, { 140,-516 },

 { 141,-516 }, { 142,-516 }, { 143,-516 }, { 144,-516 }, { 145,-516 },
 { 146,-516 }, { 147,-516 }, { 148,-516 }, { 149,-516 }, { 150,-516 },
 { 151,-516 }, { 152,-516 }, { 153,-516 }, { 154,-516 }, { 155,-516 },
 { 156,-516 }, { 157,-516 }, { 158,-516 }, { 159,-516 }, { 160,-516 },
 { 161,-516 }, { 162,-516 }, { 163,-516 }, { 164,-516 }, { 165,-516 },
 { 166,-516 }, { 167,-516 }, { 168,-516 }, { 169,-516 }, { 170,-516 },
 { 171,-516 }, { 172,-516 }, { 173,-516 }, { 174,-516 }, { 175,-516 },
 { 176,-516 }, { 177,-516 }, { 178,-516 }, { 179,-516 }, { 180,-516 },
 { 181,-516 }, { 182,-516 }, { 183,-516 }, { 184,-516 }, { 185,-516 },
 { 186,-516 }, { 187,-516 }, { 188,-516 }, { 189,-516 }, { 190,-516 },

 { 191,-516 }, { 192,-516 }, { 193,-516 }, { 194,-516 }, { 195,-516 },
 { 196,-516 }, { 197,-516 }, { 198,-516 }, { 199,-516 }, { 200,-516 },
 { 201,-516 }, { 202,-516 }, { 203,-516 }, { 204,-516 }, { 205,-516 },
 { 206,-516 }, { 207,-516 }, { 208,-516 }, { 209,-516 }, { 210,-516 },
 { 211,-516 }, { 212,-516 }, { 213,-516 }, { 214,-516 }, { 215,-516 },
 { 216,-516 }, { 217,-516 }, { 218,-516 }, { 219,-516 }, { 220,-516 },
 { 221,-516 }, { 222,-516 }, { 223,-516 }, { 224,-516 }, { 225,-516 },
 { 226,-516 }, { 227,-516 }, { 228,-516 }, { 229,-516 }, { 230,-516 },
 { 231,-516 }, { 232,-516 }, { 233,-516 }, { 234,-516 }, { 235,-516 },
 { 236,-516 }, { 237,-516 }, { 238,-516 }, { 239,-516 }, { 240,-516 },

 { 241,-516 }, { 242,-516 }, { 243,-516 }, { 244,-516 }, { 245,-516 },
 { 246,-516 }, { 247,-516 }, { 248,-516 }, { 249,-516 }, { 250,-516 },
 { 251,-516 }, { 252,-516 }, { 253,-516 }, { 254,-516 }, { 255,-516 },
 { 256,-516 }, {   0,  19 }, {   0,1156 }, {   1,-774 }, {   2,-774 },
 {   3,-774 }, {   4,-774 }, {   5,-774 }, {   6,-774 }, {   7,-774 },
 {   8,-774 }, {   9,-774 }, {   0,   0 }, {  11,-774 }, {  12,-774 },
 {  13,-774 }, {  14,-774 }, {  15,-774 }, {  16,-774 }, {  17,-774 },
 {  18,-774 }, {  19,-774 }, {  20,-774 }, {  21,-774 }, {  22,-774 },
 {  23,-774 }, {  24,-774 }, {  25,-774 }, {  26,-774 }, {  27,-774 },
 {  28,-774 }, {  29,-774 }, {  30,-774 }, {  31,-774 }, {  32,-774 },

 {  33,-774 }, {   0,   0 }, {  35,-774 }, {  36,-774 }, {  37,-774 },
 {  38,-774 }, {  39,-774 }, {  40,-774 }, {  41,-774 }, {  42,-774 },
 {  43,-774 }, {  44,-774 }, {  45,-774 }, {  46,-774 }, {  47,-774 },
 {  48, 640 }, {  49, 640 }, {  50, 640 }, {  51, 640 }, {  52, 640 },
 {  53, 640 }, {  54, 640 }, {  55, 640 }, {  56, 640 }, {  57, 640 },
 {  58,-774 }, {  59,-774 }, {  60,-774 }, {  61,-774 }, {  62,-774 },
 {  63,-774 }, {  64,-774 }, {  65, 640 }, {  66, 640 }, {  67, 640 },
 {  68, 640 }, {  69, 640 }, {  70, 640 }, {  71,-774 }, {  72,-774 },
 {  73,-774 }, {  74,-774 }, {  75,-774 }, {  76,-774 }, {  77,-774 },
 {  78,-774 }, {  79,-774 }, {  80,-774 }, {  81,-774 }, {  82,-774 },

 {  83,-774 }, {  84,-774 }, {  85,-774 }, {  86,-774 }, {  87,-774 },
 {  88,-774 }, {  89,-774 }, {  90,-774 }, {  91,-774 }, {  92,-516 },
 {  93,-774 }, {  94,-774 }, {  95,-774 }, {  96,-774 }, {  97, 640 },
 {  98, 640 }, {  99, 640 }, { 100, 640 }, { 101, 640 }, { 102, 640 },
 { 103,-774 }, { 104,-774 }, { 105,-774 }, { 106,-774 }, { 107,-774 },
 { 108,-774 }, { 109,-774 }, { 110,-774 }, { 111,-774 }, { 112,-774 },
 { 113,-774 }, { 114,-774 }, { 115,-774 }, { 116,-774 }, { 117,-774 },
 { 118,-774 }, { 119,-774 }, { 120,-774 }, { 121,-774 }, { 122,-774 },
 { 123,-774 }, { 124,-774 }, { 125,-774 }, { 126,-774 }, { 127,-774 },
 { 128,-774 }, { 129,-774 }, { 130,-774 }, { 131,-774 }, { 132,-774 },

 { 133,-774 }, { 134,-774 }, { 135,-774 }, { 136,-774 }, { 137,-774 },
 { 138,-774 }, { 139,-774 }, { 140,-774 }, { 141,-774 }, { 142,-774 },
 { 143,-774 }, { 144,-774 }, { 145,-774 }, { 146,-774 }, { 147,-774 },
 { 148,-774 }, { 149,-774 }, { 150,-774 }, { 151,-774 }, { 152,-774 },
 { 153,-774 }, { 154,-774 }, { 155,-774 }, { 156,-774 }, { 157,-774 },
 { 158,-774 }, { 159,-774 }, { 160,-774 }, { 161,-774 }, { 162,-774 },
 { 163,-774 }, { 164,-774 }, { 165,-774 }, { 166,-774 }, { 167,-774 },
 { 168,-774 }, { 169,-774 }, { 170,-774 }, { 171,-774 }, { 172,-774 },
 { 173,-774 }, { 174,-774 }, { 175,-774 }, { 176,-774 }, { 177,-774 },
 { 178,-774 }, { 179,-774 }, { 180,-774 }, { 181,-774 }, { 182,-774 },

 { 183,-774 }, { 184,-774 }, { 185,-774 }, { 186,-774 }, { 187,-774 },
 { 188,-774 }, { 189,-774 }, { 190,-774 }, { 191,-774 }, { 192,-774 },
 { 193,-774 }, { 194,-774 }, { 195,-774 }, { 196,-774 }, { 197,-774 },
 { 198,-774 }, { 199,-774 }, { 200,-774 }, { 201,-774 }, { 202,-774 },
 { 203,-774 }, { 204,-774 }, { 205,-774 }, { 206,-774 }, { 207,-774 },
 { 208,-774 }, { 209,-774 }, { 210,-774 }, { 211,-774 }, { 212,-774 },
 { 213,-774 }, { 214,-774 }, { 215,-774 }, { 216,-774 }, { 217,-774 },
 { 218,-774 }, { 219,-774 }, { 220,-774 }, { 221,-774 }, { 222,-774 },
 { 223,-774 }, { 224,-774 }, { 225,-774 }, { 226,-774 }, { 227,-774 },
 { 228,-774 }, { 229,-774 }, { 230,-774 }, { 231,-774 }, { 232,-774 },

 { 233,-774 }, { 234,-774 }, { 235,-774 }, { 236,-774 }, { 237,-774 },
 { 238,-774 }, { 239,-774 }, { 240,-774 }, { 241,-774 }, { 242,-774 },
 { 243,-774 }, { 244,-774 }, { 245,-774 }, { 246,-774 }, { 247,-774 },
 { 248,-774 }, { 249,-774 }, { 250,-774 }, { 251,-774 }, { 252,-774 },
 { 253,-774 }, { 254,-774 }, { 255,-774 }, { 256,-774 }, {   0,  11 },
 {   0, 898 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  48,   0 }, {  49,   0 },
 {  50,   0 }, {  51,   0 }, {  52,   0 }, {  53,   0 }, {  54,   0 },
 {  55,   0 }, {  56,   0 }, {  57,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  65,   0 }, {  66,   0 }, {  67,   0 }, {  68,   0 }, {  69,   0 },
 {  70,   0 }, {  71,   0 }, {  72,   0 }, {  73,   0 }, {  74,   0 },

 {  75,   0 }, {  76,   0 }, {  77,   0 }, {  78,   0 }, {  79,   0 },
 {  80,   0 }, {  81,   0 }, {  82,   0 }, {  83,   0 }, {  84,   0 },
 {  85,   0 }, {  86,   0 }, {  87,   0 }, {  88,   0 }, {  89,   0 },
 {  90,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  95,   0 }, {   0,   0 }, {  97,   0 }, {  98,   0 }, {  99,   0 },
 { 100,   0 }, { 101,   0 }, { 102,   0 }, { 103,   0 }, { 104,   0 },
 { 105,   0 }, { 106,   0 }, { 107,   0 }, { 108,   0 }, { 109,   0 },
 { 110,   0 }, { 111,   0 }, { 112,   0 }, { 113,   0 }, { 114,   0 },
 { 115,   0 }, { 116,   0 }, { 117,   0 }, { 118,   0 }, { 119,   0 },
 { 120,   0 }, { 121,   0 }, { 122,   0 }, {   0,  19 }, {   0, 774 },

 {   1,-1156 }, {   2,-1156 }, {   3,-1156 }, {   4,-1156 }, {   5,-1156 },
 {   6,-1156 }, {   7,-1156 }, {   8,-1156 }, {   9,-1156 }, {   0,   0 },
 {  11,-1156 }, {  12,-1156 }, {  13,-1156 }, {  14,-1156 }, {  15,-1156 },
 {  16,-1156 }, {  17,-1156 }, {  18,-1156 }, {  19,-1156 }, {  20,-1156 },
 {  21,-1156 }, {  22,-1156 }, {  23,-1156 }, {  24,-1156 }, {  25,-1156 },
 {  26,-1156 }, {  27,-1156 }, {  28,-1156 }, {  29,-1156 }, {  30,-1156 },
 {  31,-1156 }, {  32,-1156 }, {  33,-1156 }, {   0,   0 }, {  35,-1156 },
 {  36,-1156 }, {  37,-1156 }, {  38,-1156 }, {  39,-1156 }, {  40,-1156 },
 {  41,-1156 }, {  42,-1156 }, {  43,-1156 }, {  44,-1156 }, {  45,-1156 },
 {  46,-1156 }, {  47,-1156 }, {  48, 516 }, {  49, 516 }, {  50, 516 },

 {  51, 516 }, {  52, 516 }, {  53, 516 }, {  54, 516 }, {  55, 516 },
 {  56,-1156 }, {  57,-1156 }, {  58,-1156 }, {  59,-1156 }, {  60,-1156 },
 {  61,-1156 }, {  62,-1156 }, {  63,-1156 }, {  64,-1156 }, {  65,-1156 },
 {  66,-1156 }, {  67,-1156 }, {  68,-1156 }, {  69,-1156 }, {  70,-1156 },
 {  71,-1156 }, {  72,-1156 }, {  73,-1156 }, {  74,-1156 }, {  75,-1156 },
 {  76,-1156 }, {  77,-1156 }, {  78,-1156 }, {  79,-1156 }, {  80,-1156 },
 {  81,-1156 }, {  82,-1156 }, {  83,-1156 }, {  84,-1156 }, {  85,-1156 },
 {  86,-1156 }, {  87,-1156 }, {  88,-1156 }, {  89,-1156 }, {  90,-1156 },
 {  91,-1156 }, {  92,-898 }, {  93,-1156 }, {  94,-1156 }, {  95,-1156 },
 {  96,-1156 }, {  97,-1156 }, {  98,-1156 }, {  99,-1156 }, { 100,-1156 },

 { 101,-1156 }, { 102,-1156 }, { 103,-1156 }, { 104,-1156 }, { 105,-1156 },
 { 106,-1156 }, { 107,-1156 }, { 108,-1156 }, { 109,-1156 }, { 110,-1156 },
 { 111,-1156 }, { 112,-1156 }, { 113,-1156 }, { 114,-1156 }, { 115,-1156 },
 { 116,-1156 }, { 117,-1156 }, { 118,-1156 }, { 119,-1156 }, { 120,-1156 },
 { 121,-1156 }, { 122,-1156 }, { 123,-1156 }, { 124,-1156 }, { 125,-1156 },
 { 126,-1156 }, { 127,-1156 }, { 128,-1156 }, { 129,-1156 }, { 130,-1156 },
 { 131,-1156 }, { 132,-1156 }, { 133,-1156 }, { 134,-1156 }, { 135,-1156 },
 { 136,-1156 }, { 137,-1156 }, { 138,-1156 }, { 139,-1156 }, { 140,-1156 },
 { 141,-1156 }, { 142,-1156 }, { 143,-1156 }, { 144,-1156 }, { 145,-1156 },
 { 146,-1156 }, { 147,-1156 }, { 148,-1156 }, { 149,-1156 }, { 150,-1156 },

 { 151,-1156 }, { 152,-1156 }, { 153,-1156 }, { 154,-1156 }, { 155,-1156 },
 { 156,-1156 }, { 157,-1156 }, { 158,-1156 }, { 159,-1156 }, { 160,-1156 },
 { 161,-1156 }, { 162,-1156 }, { 163,-1156 }, { 164,-1156 }, { 165,-1156 },
 { 166,-1156 }, { 167,-1156 }, { 168,-1156 }, { 169,-1156 }, { 170,-1156 },
 { 171,-1156 }, { 172,-1156 }, { 173,-1156 }, { 174,-1156 }, { 175,-1156 },
 { 176,-1156 }, { 177,-1156 }, { 178,-1156 }, { 179,-1156 }, { 180,-1156 },
 { 181,-1156 }, { 182,-1156 }, { 183,-1156 }, { 184,-1156 }, { 185,-1156 },
 { 186,-1156 }, { 187,-1156 }, { 188,-1156 }, { 189,-1156 }, { 190,-1156 },
 { 191,-1156 }, { 192,-1156 }, { 193,-1156 }, { 194,-1156 }, { 195,-1156 },
 { 196,-1156 }, { 197,-1156 }, { 198,-1156 }, { 199,-1156 }, { 200,-1156 },

 { 201,-1156 }, { 202,-1156 }, { 203,-1156 }, { 204,-1156 }, { 205,-1156 },
 { 206,-1156 }, { 207,-1156 }, { 208,-1156 }, { 209,-1156 }, { 210,-1156 },
 { 211,-1156 }, { 212,-1156 }, { 213,-1156 }, { 214,-1156 }, { 215,-1156 },
 { 216,-1156 }, { 217,-1156 }, { 218,-1156 }, { 219,-1156 }, { 220,-1156 },
 { 221,-1156 }, { 222,-1156 }, { 223,-1156 }, { 224,-1156 }, { 225,-1156 },
 { 226,-1156 }, { 227,-1156 }, { 228,-1156 }, { 229,-1156 }, { 230,-1156 },
 { 231,-1156 }, { 232,-1156 }, { 233,-1156 }, { 234,-1156 }, { 235,-1156 },
 { 236,-1156 }, { 237,-1156 }, { 238,-1156 }, { 239,-1156 }, { 240,-1156 },
 { 241,-1156 }, { 242,-1156 }, { 243,-1156 }, { 244,-1156 }, { 245,-1156 },
 { 246,-1156 }, { 247,-1156 }, { 248,-1156 }, { 249,-1156 }, { 250,-1156 },

 { 251,-1156 }, { 252,-1156 }, { 253,-1156 }, { 254,-1156 }, { 255,-1156 },
 { 256,-1156 }, {   0,  19 }, {   0, 516 }, {   1,-1414 }, {   2,-1414 },
 {   3,-1414 }, {   4,-1414 }, {   5,-1414 }, {   6,-1414 }, {   7,-1414 },
 {   8,-1414 }, {   9,-1414 }, {   0,   0 }, {  11,-1414 }, {  12,-1414 },
 {  13,-1414 }, {  14,-1414 }, {  15,-1414 }, {  16,-1414 }, {  17,-1414 },
 {  18,-1414 }, {  19,-1414 }, {  20,-1414 }, {  21,-1414 }, {  22,-1414 },
 {  23,-1414 }, {  24,-1414 }, {  25,-1414 }, {  26,-1414 }, {  27,-1414 },
 {  28,-1414 }, {  29,-1414 }, {  30,-1414 }, {  31,-1414 }, {  32,-1414 },
 {  33,-1414 }, {   0,   0 }, {  35,-1414 }, {  36,-1414 }, {  37,-1414 },
 {  38,-1414 }, {  39,-1414 }, {  40,-1414 }, {  41,-1414 }, {  42,-1414 },

 {  43,-1414 }, {  44,-1414 }, {  45,-1414 }, {  46,-1414 }, {  47,-1414 },
 {  48, 258 }, {  49, 258 }, {  50, 258 }, {  51, 258 }, {  52, 258 },
 {  53, 258 }, {  54, 258 }, {  55, 258 }, {  56, 258 }, {  57, 258 },
 {  58,-1414 }, {  59,-1414 }, {  60,-1414 }, {  61,-1414 }, {  62,-1414 },
 {  63,-1414 }, {  64,-1414 }, {  65, 258 }, {  66, 258 }, {  67, 258 },
 {  68, 258 }, {  69, 258 }, {  70, 258 }, {  71,-1414 }, {  72,-1414 },
 {  73,-1414 }, {  74,-1414 }, {  75,-1414 }, {  76,-1414 }, {  77,-1414 },
 {  78,-1414 }, {  79,-1414 }, {  80,-1414 }, {  81,-1414 }, {  82,-1414 },
 {  83,-1414 }, {  84,-1414 }, {  85,-1414 }, {  86,-1414 }, {  87,-1414 },
 {  88,-1414 }, {  89,-1414 }, {  90,-1414 }, {  91,-1414 }, {  92,-1156 },

 {  93,-1414 }, {  94,-1414 }, {  95,-1414 }, {  96,-1414 }, {  97, 258 },
 {  98, 258 }, {  99, 258 }, { 100, 258 }, { 101, 258 }, { 102, 258 },
 { 103,-1414 }, { 104,-1414 }, { 105,-1414 }, { 106,-1414 }, { 107,-1414 },
 { 108,-1414 }, { 109,-1414 }, { 110,-1414 }, { 111,-1414 }, { 112,-1414 },
 { 113,-1414 }, { 114,-1414 }, { 115,-1414 }, { 116,-1414 }, { 117,-1414 },
 { 118,-1414 }, { 119,-1414 }, { 120,-1414 }, { 121,-1414 }, { 122,-1414 },
 { 123,-1414 }, { 124,-1414 }, { 125,-1414 }, { 126,-1414 }, { 127,-1414 },
 { 128,-1414 }, { 129,-1414 }, { 130,-1414 }, { 131,-1414 }, { 132,-1414 },
 { 133,-1414 }, { 134,-1414 }, { 135,-1414 }, { 136,-1414 }, { 137,-1414 },
 { 138,-1414 }, { 139,-1414 }, { 140,-1414 }, { 141,-1414 }, { 142,-1414 },

 { 143,-1414 }, { 144,-1414 }, { 145,-1414 }, { 146,-1414 }, { 147,-1414 },
 { 148,-1414 }, { 149,-1414 }, { 150,-1414 }, { 151,-1414 }, { 152,-1414 },
 { 153,-1414 }, { 154,-1414 }, { 155,-1414 }, { 156,-1414 }, { 157,-1414 },
 { 158,-1414 }, { 159,-1414 }, { 160,-1414 }, { 161,-1414 }, { 162,-1414 },
 { 163,-1414 }, { 164,-1414 }, { 165,-1414 }, { 166,-1414 }, { 167,-1414 },
 { 168,-1414 }, { 169,-1414 }, { 170,-1414 }, { 171,-1414 }, { 172,-1414 },
 { 173,-1414 }, { 174,-1414 }, { 175,-1414 }, { 176,-1414 }, { 177,-1414 },
 { 178,-1414 }, { 179,-1414 }, { 180,-1414 }, { 181,-1414 }, { 182,-1414 },
 { 183,-1414 }, { 184,-1414 }, { 185,-1414 }, { 186,-1414 }, { 187,-1414 },
 { 188,-1414 }, { 189,-1414 }, { 190,-1414 }, { 191,-1414 }, { 192,-1414 },

 { 193,-1414 }, { 194,-1414 }, { 195,-1414 }, { 196,-1414 }, { 197,-1414 },
 { 198,-1414 }, { 199,-1414 }, { 200,-1414 }, { 201,-1414 }, { 202,-1414 },
 { 203,-1414 }, { 204,-1414 }, { 205,-1414 }, { 206,-1414 }, { 207,-1414 },
 { 208,-1414 }, { 209,-1414 }, { 210,-1414 }, { 211,-1414 }, { 212,-1414 },
 { 213,-1414 }, { 214,-1414 }, { 215,-1414 }, { 216,-1414 }, { 217,-1414 },
 { 218,-1414 }, { 219,-1414 }, { 220,-1414 }, { 221,-1414 }, { 222,-1414 },
 { 223,-1414 }, { 224,-1414 }, { 225,-1414 }, { 226,-1414 }, { 227,-1414 },
 { 228,-1414 }, { 229,-1414 }, { 230,-1414 }, { 231,-1414 }, { 232,-1414 },
 { 233,-1414 }, { 234,-1414 }, { 235,-1414 }, { 236,-1414 }, { 237,-1414 },
 { 238,-1414 }, { 239,-1414 }, { 240,-1414 }, { 241,-1414 }, { 242,-1414 },

 { 243,-1414 }, { 244,-1414 }, { 245,-1414 }, { 246,-1414 }, { 247,-1414 },
 { 248,-1414 }, { 249,-1414 }, { 250,-1414 }, { 251,-1414 }, { 252,-1414 },
 { 253,-1414 }, { 254,-1414 }, { 255,-1414 }, { 256,-1414 }, {   0,  19 },
 {   0, 258 }, {   1,-1672 }, {   2,-1672 }, {   3,-1672 }, {   4,-1672 },
 {   5,-1672 }, {   6,-1672 }, {   7,-1672 }, {   8,-1672 }, {   9,-1672 },
 {   0,   0 }, {  11,-1672 }, {  12,-1672 }, {  13,-1672 }, {  14,-1672 },
 {  15,-1672 }, {  16,-1672 }, {  17,-1672 }, {  18,-1672 }, {  19,-1672 },
 {  20,-1672 }, {  21,-1672 }, {  22,-1672 }, {  23,-1672 }, {  24,-1672 },
 {  25,-1672 }, {  26,-1672 }, {  27,-1672 }, {  28,-1672 }, {  29,-1672 },
 {  30,-1672 }, {  31,-1672 }, {  32,-1672 }, {  33,-1672 }, {   0,   0 },

 {  35,-1672 }, {  36,-1672 }, {  37,-1672 }, {  38,-1672 }, {  39,-1672 },
 {  40,-1672 }, {  41,-1672 }, {  42,-1672 }, {  43,-1672 }, {  44,-1672 },
 {  45,-1672 }, {  46,-1672 }, {  47,-1672 }, {  48,-1672 }, {  49,-1672 },
 {  50,-1672 }, {  51,-1672 }, {  52,-1672 }, {  53,-1672 }, {  54,-1672 },
 {  55,-1672 }, {  56,-1672 }, {  57,-1672 }, {  58,-1672 }, {  59,-1672 },
 {  60,-1672 }, {  61,-1672 }, {  62,-1672 }, {  63,-1672 }, {  64,-1672 },
 {  65,-1672 }, {  66,-1672 }, {  67,-1672 }, {  68,-1672 }, {  69,-1672 },
 {  70,-1672 }, {  71,-1672 }, {  72,-1672 }, {  73,-1672 }, {  74,-1672 },
 {  75,-1672 }, {  76,-1672 }, {  77,-1672 }, {  78,-1672 }, {  79,-1672 },
 {  80,-1672 }, {  81,-1672 }, {  82,-1672 }, {  83,-1672 }, {  84,-1672 },

 {  85,-1672 }, {  86,-1672 }, {  87,-1672 }, {  88,-1672 }, {  89,-1672 },
 {  90,-1672 }, {  91,-1672 }, {  92,-1414 }, {  93,-1672 }, {  94,-1672 },
 {  95,-1672 }, {  96,-1672 }, {  97,-1672 }, {  98,-1672 }, {  99,-1672 },
 { 100,-1672 }, { 101,-1672 }, { 102,-1672 }, { 103,-1672 }, { 104,-1672 },
 { 105,-1672 }, { 106,-1672 }, { 107,-1672 }, { 108,-1672 }, { 109,-1672 },
 { 110,-1672 }, { 111,-1672 }, { 112,-1672 }, { 113,-1672 }, { 114,-1672 },
 { 115,-1672 }, { 116,-1672 }, { 117,-1672 }, { 118,-1672 }, { 119,-1672 },
 { 120,-1672 }, { 121,-1672 }, { 122,-1672 }, { 123,-1672 }, { 124,-1672 },
 { 125,-1672 }, { 126,-1672 }, { 127,-1672 }, { 128,-1672 }, { 129,-1672 },
 { 130,-1672 }, { 131,-1672 }, { 132,-1672 }, { 133,-1672 }, { 134,-1672 },

 { 135,-1672 }, { 136,-1672 }, { 137,-1672 }, { 138,-1672 }, { 139,-1672 },
 { 140,-1672 }, { 141,-1672 }, { 142,-1672 }, { 143,-1672 }, { 144,-1672 },
 { 145,-1672 }, { 146,-1672 }, { 147,-1672 }, { 148,-1672 }, { 149,-1672 },
 { 150,-1672 }, { 151,-1672 }, { 152,-1672 }, { 153,-1672 }, { 154,-1672 },
 { 155,-1672 }, { 156,-1672 }, { 157,-1672 }, { 158,-1672 }, { 159,-1672 },
 { 160,-1672 }, { 161,-1672 }, { 162,-1672 }, { 163,-1672 }, { 164,-1672 },
 { 165,-1672 }, { 166,-1672 }, { 167,-1672 }, { 168,-1672 }, { 169,-1672 },
 { 170,-1672 }, { 171,-1672 }, { 172,-1672 }, { 173,-1672 }, { 174,-1672 },
 { 175,-1672 }, { 176,-1672 }, { 177,-1672 }, { 178,-1672 }, { 179,-1672 },
 { 180,-1672 }, { 181,-1672 }, { 182,-1672 }, { 183,-1672 }, { 184,-1672 },

 { 185,-1672 }, { 186,-1672 }, { 187,-1672 }, { 188,-1672 }, { 189,-1672 },
 { 190,-1672 }, { 191,-1672 }, { 192,-1672 }, { 193,-1672 }, { 194,-1672 },
 { 195,-1672 }, { 196,-1672 }, { 197,-1672 }, { 198,-1672 }, { 199,-1672 },
 { 200,-1672 }, { 201,-1672 }, { 202,-1672 }, { 203,-1672 }, { 204,-1672 },
 { 205,-1672 }, { 206,-1672 }, { 207,-1672 }, { 208,-1672 }, { 209,-1672 },
 { 210,-1672 }, { 211,-1672 }, { 212,-1672 }, { 213,-1672 }, { 214,-1672 },
 { 215,-1672 }, { 216,-1672 }, { 217,-1672 }, { 218,-1672 }, { 219,-1672 },
 { 220,-1672 }, { 221,-1672 }, { 222,-1672 }, { 223,-1672 }, { 224,-1672 },
 { 225,-1672 }, { 226,-1672 }, { 227,-1672 }, { 228,-1672 }, { 229,-1672 },
 { 230,-1672 }, { 231,-1672 }, { 232,-1672 }, { 233,-1672 }, { 234,-1672 },

 { 235,-1672 }, { 236,-1672 }, { 237,-1672 }, { 238,-1672 }, { 239,-1672 },
 { 240,-1672 }, { 241,-1672 }, { 242,-1672 }, { 243,-1672 }, { 244,-1672 },
 { 245,-1672 }, { 246,-1672 }, { 247,-1672 }, { 248,-1672 }, { 249,-1672 },
 { 250,-1672 }, { 251,-1672 }, { 252,-1672 }, { 253,-1672 }, { 254,-1672 },
 { 255,-1672 }, { 256,-1672 }, { 257,  23 }, {   1,   0 },    };

static yyconst struct yy_trans_info *yy_start_state_list[15] =
    {
    &yy_transition[1],
    &yy_transition[3],
    &yy_transition[261],
    &yy_transition[519],
    &yy_transition[777],
    &yy_transition[1035],
    &yy_transition[1293],
    &yy_transition[1551],
    &yy_transition[1809],
    &yy_transition[2067],
    &yy_transition[2325],
    &yy_transition[2583],
    &yy_transition[2841],
    &yy_transition[3099],
    &yy_transition[3357],

    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[23] =
    {   0,
0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 
    1, 1, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "lexer.l"
#line 2 "lexer.l"
#include <stdio.h>
#include "config_lexer.h"
typedef struct _yyuser_data_t {
    int group_indent;
    int is_array;
    char *lbuf;
    char sbuf[64];
    int len;
    int lbuf_len;
    int i;
} yyuser_data_t;
#define YY_DECL int yylex (yyscan_t yyscanner, lexer_output_t *output)
int parse_quote(char *buf, int len) {
    int cur = 0;
    int i;
    for (i = 0; i < len; cur++, i++) {
        if (buf[i] == '\\') {
            if (i+1 < len) {
                i++;
                switch(buf[i]) {
                    case 'n':
                        buf[cur] = '\n'; break;
                    case 'r':
                        buf[cur] = '\r'; break;
                    case 't':
                        buf[cur] = '\t'; break;
                    case 'v':
                        buf[cur] = '\v'; break;
                    case 'a':
                        buf[cur] = '\x07'; break;
                    case 'b':
                        buf[cur] = '\x08'; break;
                    case 'f':
                        buf[cur] = '\x0c'; break;
                    case '\'':
                        buf[cur] = '\''; break;
                    case '"':
                        buf[cur] = '"'; break;
                    case '\\':
                        buf[cur] = '\\'; break;
                    case 'x':
                        if (i+2 < len
                                && ((buf[i+1] >= '0' && buf[i+1] <= '9')
                                 || (buf[i+1] >= 'a' && buf[i+1] <= 'f')
                                 || (buf[i+1] >= 'A' && buf[i+1] <= 'F'))
                                && ((buf[i+2] >= '0' && buf[i+2] <= '9')
                                 || (buf[i+2] >= 'a' && buf[i+2] <= 'f')
                                 || (buf[i+2] >= 'A' && buf[i+2] <= 'F')))
                        {
                        #define ___hval(x)          \
                            (((x)<='9')?            \
                                (x) - '0' :         \
                                (((x)>='a')?        \
                                    (x) - 'a' + 10 :\
                                    (x) - 'A' + 10))
                            buf[cur] =
                                (___hval(buf[i+1])<<4) |
                                ___hval(buf[i+2]);
                            i += 2;
                        } else {
                            buf[cur] = buf[i];
                        }
                        break;
                    case '0':
                    case '1':
                    case '2':
                        if (i+2 < len
                                && (buf[i+1] >= '0' && buf[i+1] <= '7')
                                && (buf[i+2] >= '0' && buf[i+2] <= '7'))
                        {
                        #define ___oval(x) ((x) - '0')
                            buf[cur] =
                                (___oval(buf[i]) << 6) | 
                                (___oval(buf[i+1]) << 3) | 
                                ___oval(buf[i]);
                            i += 2;
                        } else if (buf[i] == '0') {
                            buf[cur] = '\0';
                        } else {
                            buf[cur] = buf[i];
                        }
                        break;
                    default:
                        buf[cur] = buf[i];
                }
            }
        } else {
            buf[cur] = buf[i];
        }
    }
    buf[cur] = '\0';
    return cur;
}






#line 2034 "lexer.c"

#define INITIAL 0
#define VALUE 1
#define AFTER_KEY 2
#define QUOTED_VALUE 3
#define COMMENT 4
#define GROUP 5
#define GROUP_FINISH 6

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#define YY_EXTRA_TYPE yyuser_data_t*

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    yy_size_t yy_n_chars;
    yy_size_t yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

int yylex_init (yyscan_t* scanner);

int yylex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (yyscan_t yyscanner );

int yyget_debug (yyscan_t yyscanner );

void yyset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra (yyscan_t yyscanner );

void yyset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *yyget_in (yyscan_t yyscanner );

void yyset_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *yyget_out (yyscan_t yyscanner );

void yyset_out  (FILE * out_str ,yyscan_t yyscanner );

yy_size_t yyget_leng (yyscan_t yyscanner );

char *yyget_text (yyscan_t yyscanner );

int yyget_lineno (yyscan_t yyscanner );

void yyset_lineno (int line_number ,yyscan_t yyscanner );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (yyscan_t yyscanner );
#else
extern int yywrap (yyscan_t yyscanner );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  ,yyscan_t yyscanner);
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	errno=0; \
	while ( (result = read( fileno(yyin), (char *) buf, max_size )) < 0 ) \
	{ \
		if( errno != EINTR) \
		{ \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
			break; \
		} \
		errno=0; \
		clearerr(yyin); \
	}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (yyscan_t yyscanner);

#define YY_DECL int yylex (yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 112 "lexer.l"


#line 2246 "lexer.c"

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		yy_load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start_state_list[yyg->yy_start];
yy_match:
		{
		register yyconst struct yy_trans_info *yy_trans_info;

		register YY_CHAR yy_c;

		for ( yy_c = YY_SC_TO_UI(*yy_cp);
		      (yy_trans_info = &yy_current_state[(unsigned int) yy_c])->
		yy_verify == yy_c;
		      yy_c = YY_SC_TO_UI(*++yy_cp) )
			{
			yy_current_state += yy_trans_info->yy_nxt;

			if ( yy_current_state[-1].yy_nxt )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			}
		}

yy_find_action:
		yy_act = yy_current_state[-1].yy_nxt;

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			yy_size_t yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos + 1;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 114 "lexer.l"
{ yyextra->is_array = 0; yyextra->group_indent = 0; BEGIN(GROUP); }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 115 "lexer.l"
{ yyextra->is_array = 1; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 116 "lexer.l"
{ BEGIN(COMMENT); }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 118 "lexer.l"
{
    if ((size_t) yyleng < sizeof(yyextra->sbuf)) {
        /* copy to small buf */
        memcpy(yyextra->sbuf, yytext, yyleng);
        yyextra->sbuf[yyleng] = 0;
        output->key = yyextra->sbuf;
    } else {
        if (yyleng >= yyextra->lbuf_len) {
            yyextra->lbuf_len = yyleng + 1;
            if (yyextra->lbuf) free(yyextra->lbuf);
            yyextra->lbuf = (char*) malloc(yyextra->lbuf_len);
        }
        /* copy to large buf */
        memcpy(yyextra->lbuf, yytext, yyleng);
        yyextra->lbuf[yyleng] = 0;
        output->key = yyextra->lbuf;
    }
    output->key_len = yyleng;
    output->is_array = yyextra->is_array;
    BEGIN(AFTER_KEY);
}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 140 "lexer.l"
;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 141 "lexer.l"
{ yyextra->is_array = 0; BEGIN(VALUE); }
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 142 "lexer.l"
{ BEGIN(INITIAL); output->lineno = yylineno; return -1; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 144 "lexer.l"
{ yyextra->is_array = 0; BEGIN(INITIAL); }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 145 "lexer.l"
{ yyextra->group_indent++; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 146 "lexer.l"
{ yyextra->is_array = 1; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 147 "lexer.l"
{
    output->key = yytext;
    output->key_len = yyleng;
    output->type = TOKEN_TYPE_GROUP;
    output->level = yyextra->group_indent;
    output->is_array = yyextra->is_array;
    output->lineno = yylineno;
    if (output->is_array) {
        BEGIN(GROUP_FINISH);
    }
    return 1;
}
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 160 "lexer.l"
{ BEGIN(INITIAL); }
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 161 "lexer.l"
;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 163 "lexer.l"
{
    output->value = yytext;
    output->value_len = yyleng;
    output->type = TOKEN_TYPE_ITEM;
    output->lineno = yylineno;
    BEGIN(COMMENT);
    return 2;
}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 171 "lexer.l"
{ BEGIN(QUOTED_VALUE); }
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 172 "lexer.l"
{
    output->value = NULL;
    output->value_len = 0;
    output->type = TOKEN_TYPE_ITEM;
    output->lineno = yylineno;
    BEGIN(INITIAL);
    return 2;
}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 180 "lexer.l"
{ BEGIN(COMMENT); }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 181 "lexer.l"
;
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 183 "lexer.l"
{
    /* convert quoted value */
    output->value = yytext;
    output->value_len = parse_quote(yytext, yyleng);
    output->type = TOKEN_TYPE_ITEM;
    output->lineno = yylineno;
    BEGIN(COMMENT);
    return 2;
}
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 193 "lexer.l"
;
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 194 "lexer.l"
{
    output->lineno = yylineno;
    return -1;
}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 199 "lexer.l"
ECHO;
	YY_BREAK
#line 2509 "lexer.c"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(VALUE):
case YY_STATE_EOF(AFTER_KEY):
case YY_STATE_EOF(QUOTED_VALUE):
case YY_STATE_EOF(COMMENT):
case YY_STATE_EOF(GROUP):
case YY_STATE_EOF(GROUP_FINISH):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yy_start_state_list[yyg->yy_start];

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		yy_current_state += yy_current_state[(*yy_cp ? YY_SC_TO_UI(*yy_cp) : 256)].yy_nxt;
		if ( yy_current_state[-1].yy_nxt )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register int yy_c = 256;
	register yyconst struct yy_trans_info *yy_trans_info;

	yy_trans_info = &yy_current_state[(unsigned int) yy_c];
	yy_current_state += yy_trans_info->yy_nxt;
	yy_is_jam = (yy_trans_info->yy_verify != yy_c);

	if ( ! yy_is_jam )
		{
		if ( yy_current_state[-1].yy_nxt )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		}

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp , yyscan_t yyscanner)
{
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = yyg->yy_n_chars + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			yy_size_t offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	if ( c == '\n' )
		   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	yy_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf ,yyscanner );

	yyfree((void *) b ,yyscanner );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n, i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
yy_size_t yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "yyset_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "yyset_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void yyset_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int yylex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */

int yylex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    yyset_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 199 "lexer.l"



typedef struct lexer_internal {
    yyscan_t s;
    yyuser_data_t extra;
} lexer_internal_t;

int lexer_init(lexer_t *l) {
    lexer_internal_t *internal;
    int ret;

    if (l == NULL) {
        errno = EINVAL;
        return 1;
    }

    internal = (lexer_internal_t*) yyalloc(sizeof(lexer_internal_t),NULL);

    if (internal == NULL) {
        errno = ENOMEM;
        return 1;
    }

    memset(&internal->extra, 0, sizeof(internal->extra));

    ret = yylex_init_extra(&internal->extra,&internal->s);
    if (ret) {
        yylex_destroy(internal->s);
        yyfree(internal,NULL);
        return ret;
    }

    *l = (lexer_t) internal;

    return 0;
}

int lexer_setfile(lexer_t l, const char *filename) {
    FILE *f;
    lexer_internal_t *internal = (lexer_internal_t*) l;
    f = fopen(filename, "r");
    yyset_in(f,internal->s);
    if (f == NULL) {
        return -1;
    }
    return 0;
}

int lexer_destroy(lexer_t l) {
    lexer_internal_t *internal = (lexer_internal_t*) l;
    yylex_destroy(internal->s);
    yyfree(internal,NULL);
    return 0;
}

int lexer_next(lexer_t l, lexer_output_t *output) {
    lexer_internal_t *internal = (lexer_internal_t*) l;
    return yylex(internal->s,output);
}

